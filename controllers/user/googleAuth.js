const jwt = require("jsonwebtoken");
const { OAuth2Client } = require("google-auth-library");

const jwtConfig = require("../../config/jwtConfig");
const UnsafeUser = require("../../models/UnsafeUser");
const initializeLogger = require("../../log-service");
const log = initializeLogger("controllers/user/googleAuth");

const cmapClientID =
  "739716651449-7d1e8iijue6srr9l5mi2iogp982sqoa0.apps.googleusercontent.com";

const standardCookieOptions = {
  // secure: true,
};

const jwtCookieOptions = {
  ...standardCookieOptions,
  httpOnly: true,
};

// Accepts a token generated by a successful google oauth sign-in. We verify token, then
// either create a new user or log in an existing user
module.exports = async (req, res, next) => {
  const client = new OAuth2Client(cmapClientID);
  const { userIDToken } = req.body;

  // TODO unhandled fail case
  const ticket = await client.verifyIdToken({
    idToken: userIDToken,
    audience: cmapClientID,
  });

  // our app client ID, user unique google ID, user email, first, last
  const {
    aud,
    sub: googleID,
    email,
    given_name: firstName,
    family_name: lastName,
  } = ticket.payload;

  if (aud !== cmapClientID) {
    log.error("google auth token does not match cmap client id", { aud });
    return res.sendStatus(500);
  }

  // User already has a google ID associated with their account
  // TODO unhandled failure case
  let googleIDUser = await UnsafeUser.getUserByGoogleID(googleID);

  if (googleIDUser) {
    let user = new UnsafeUser(googleIDUser);
    res.cookie("UserInfo", JSON.stringify(user.makeSafe()), {
      ...standardCookieOptions,
      expires: new Date(Date.now() + 1000 * 60 * 60 * 2),
    });
    res.cookie(
      "jwt",
      jwt.sign(googleIDUser.getJWTPayload(), jwtConfig.secret, {
        expiresIn: "2h",
      }),
      {
        ...jwtCookieOptions,
        expires: new Date(Date.now() + 1000 * 60 * 60 * 2),
      }
    );
    res.json(true);
    return next();
  } // else ????

  // User has an account but has no associated google ID
  // TODO unhandled failure case
  let existingUser = await UnsafeUser.getUserByEmail(email);

  if (existingUser) {
    let user = new UnsafeUser({ ...existingUser, googleID });

    // TODO unhandled failure case
    await user.attachGoogleIDToExistingUser();

    // TODO stringify can throw
    res.cookie("UserInfo", JSON.stringify(user.makeSafe()), {
      ...standardCookieOptions,
      expires: new Date(Date.now() + 1000 * 60 * 60 * 2),
    });

    res.cookie(
      "jwt",
      jwt.sign(user.getJWTPayload(), jwtConfig.secret, { expiresIn: "2h" }),
      {
        ...jwtCookieOptions,
        expires: new Date(Date.now() + 1000 * 60 * 60 * 2),
      }
    );

    res.json(true);
    return next();
  }

  // New user
  let user = new UnsafeUser({
    googleID,
    email,
    firstName,
    lastName,
    username: email,
  });

  // TODO unhandled failure case saveAsNew can throw
  await user.saveAsNew();

  // TODO stringify can throw
  res.cookie("UserInfo", JSON.stringify(user.makeSafe()), {
    ...standardCookieOptions,
    expires: new Date(Date.now() + 1000 * 60 * 60 * 2),
  });

  res.cookie(
    "jwt",
    jwt.sign(user.getJWTPayload(), jwtConfig.secret, { expiresIn: "2h" }),
    { ...jwtCookieOptions, expires: new Date(Date.now() + 1000 * 60 * 60 * 2) }
  );

  res.json(true);

  return next();
};
