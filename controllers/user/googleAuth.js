const jwt = require("jsonwebtoken");
const { OAuth2Client } = require("google-auth-library");

const jwtConfig = require("../../config/jwtConfig");
const UnsafeUser = require("../../models/UnsafeUser");
const initializeLogger = require("../../log-service");
const notifyAdmin = require("../../utility/email/notifyAdmin");

const moduleLogger = initializeLogger("controllers/user/googleAuth");

// const cmapClientIDDevelopment = '739716651449-t0mh6vdfgk4f1p73s3qn0rsaag04mn03.apps.googleusercontent.com';
const cmapClientID = '739716651449-7rbvsac1okk8mkd4g1mti8tnhdk1m3a8.apps.googleusercontent.com'

const clientId = cmapClientID;

const standardCookieOptions = {
  // secure: true,
};

const jwtCookieOptions = {
  ...standardCookieOptions,
  httpOnly: true,
};

const attachCookieCredentials = (res, user) => {
  res.cookie("UserInfo", JSON.stringify(user.makeSafe()), {
    ...standardCookieOptions,
    expires: new Date(Date.now() + 1000 * 60 * 60 * 2),
  });

  res.cookie(
    "jwt",
    jwt.sign(user.getJWTPayload(), jwtConfig.secret, {
      expiresIn: "2h",
    }),
    {
      ...jwtCookieOptions,
      expires: new Date(Date.now() + 1000 * 60 * 60 * 2),
    }
  );
}


const registerGoogleUser = async (userInfo, log = moduleLogger) => {
  log.info ("attempting to register user with google account", { email: userInfo.email });
  const user = new UnsafeUser(userInfo);
  let result;
  try {
    result = await user.saveAsNew(log);
  } catch (e) {
    log.error ("error attempting to save new user with google account", { email: userInfo.email })
    return [e];
  }
  if (result) { // success
    log.info ("success registering new user with google account", { email: userInfo.email })
    return [null, user];
  } else {
    return [new Error ("Register Google User Error")]
  }
}

// Accepts a token generated by a successful google oauth sign-in.
// We verify token, then either
// - sign in user with associated google id
// - if no user with id, try to find user with same google email and attach id to user
module.exports = async (req, res, next) => {
  const log = moduleLogger.setReqId (req.requestId);

  const { userIDToken: credential, originator, register } = req.body;

  log.info ('attempting to log in user via google oauth2', { originator, register });

  // 1. verify oAuth token

  const client = new OAuth2Client(clientId);

  let ticket;
  try {
    ticket = await client.verifyIdToken({
      idToken: credential,
      audience: clientId,
    });
  } catch (e) {
    log.error ('error calling google client verifyIdToken', { error: e });
    notifyAdmin ('Error using OAuth2 API', `There was an error while attempting to log in a user via google OAuth2 while calling 'verifyIdToken'. The originator of the login request was '${originator}'. The error message was: '${e.message}'`);
    return res.sendStatus(500);
  }

  // our app client ID, user unique google ID, user email, first, last
  const {
    aud,
    sub: googleID,
    email,
    given_name: firstName,
    family_name: lastName,
  } = ticket.payload;

  if (aud !== clientId) {
    log.error("google auth token does not match cmap client id", { aud, clientId });
    notifyAdmin ('Error Verifying OAuth Response', `There was an error while attempting to log in a user via google OAuth2: the API response did not match the CMAP Google Client ID. The originator of the login request was '${originator}'.`);
    return res.sendStatus(500);
  }


  // 2. check if user exists AND their google id is associated with their account
  //    if so, log them in

  let googleIDUser;
  try {
    googleIDUser = await UnsafeUser.getUserByGoogleID(googleID, log);
  } catch (e) {
    log.error("error attempting to get user by google id", { error: e });
    // send admin email?
    return res.sendStatus(500);
  }

  if (googleIDUser) {
    let user = new UnsafeUser(googleIDUser);
    attachCookieCredentials (res, user);
    log.info ('successfully logged in user with google oauth', { userId: user.id });
    res.json({ login: true });
    return next();
  }


  // 3. check if user exists with same email
  //    if so, associate their account with their google id and log them in

  let existingUser;
  try {
    existingUser = await UnsafeUser.getUserByEmail(email, log);
  } catch (e) {
    log.error("error attempting to get user by google email", { error: e, email });
    return res.sendStatus(500);
  }

  if (existingUser) {
    // found user with same google email, but no google id; attempt to attach google id to user
    let user = new UnsafeUser({ ...existingUser, googleID });

    const [attachErr] = await user.attachGoogleIDToExistingUser(log);

    if (attachErr) {
      notifyAdmin ('Error Attaching Google Account', `There was an error while attempting to log in a user via google OAuth2: A user with the same email was identified but the operation failed. The originator of the login request was '${originator}'.`);
      return res.status(500).send ('Failed to associate google id to existing user');
    }

    attachCookieCredentials (res, user);

    res.json({ attach: true });
    return next();
  }

  // 4. login has failed; if "register" flag is true, register user
  log.info ("checking if user should be registered", { register: req.body.register });

  if (req.body.register === true) {
    const userInfo = {
      googleID,
      email,
      firstName,
      lastName,
      username: email,
    }
    const [err, user] = await registerGoogleUser (userInfo, log);
    if (!err && user) {
      log.info ('registered new user with google account', { email: user.email })
      attachCookieCredentials (res, user);
      res.json ({ register: true });
      return next();
    } else {
      log.error ('error attaching credentials to user', { email: user.email })
    }
  } else {
    log.info ('register flag not set', null);
  }


  // 5. no successful login or regstration; return error

  log.info ('no user exists with google cilent provided email, and register option was not selected', { googleEmail: email });
  if (originator === 'login form') {
    // only notify if it was not an automatic login
    notifyAdmin ('Unsuccessful Login with Google', `An attempt to log a user in via their Google Account was unsuccessful. The originator of the login request was '${originator}'. The email was '${email}'.`);
  }
  res.status(401).send ('No such user');
  return next ();
}
