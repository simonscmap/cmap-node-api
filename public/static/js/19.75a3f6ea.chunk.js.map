{"version":3,"sources":["../node_modules/csv-stringify/lib/sync.js","../node_modules/csv-stringify/lib/index.js","Components/Catalog/SearchResults.js"],"names":["stringify","require","StringDecoder","module","exports","records","options","data","Buffer","isBuffer","decoder","write","stringifier","Stringifier","push","record","toString","end","join","Transform","bom_utf8","from","opts","writableObjectMode","err","opt","underscore","normalize","record_delimiter","state","stop","info","bom","undefined","CsvError","JSON","delimiter","quote","quoted","quoted_empty","quoted_match","Array","isArray","isRegExp","RegExp","Error","quoted_string","eof","escape","length","header","columns","this","normalize_columns","cast","bigint","value","boolean","date","getTime","number","object","string","chunk","encoding","callback","Object","keys","headers","emit","chunkIsHeader","splice","i","field","__cast","index","column","get","key","csvrecord","isObject","containsdelimiter","indexOf","containsQuote","containsEscape","containsRecordDelimiter","quotedString","quotedMatch","filter","test","shouldQuote","regexp","replace","map","context","type","Date","newcolumns","k","arguments","argument","chunks","on","read","setImmediate","code","message","captureStackTrace","contexts","parse","obj","str","_","match","toLowerCase","charCodeOfDot","charCodeAt","reEscapeChar","rePropName","reIsDeepProp","reIsPlainProp","isSymbol","prototype","call","getTag","castPath","isKey","result","expression","subString","trim","stringToPath","toKey","INFINITY","path","mapDispatchToProps","searchResultsFetch","searchResultsStore","searchResultsSetLoadingState","SearchResultStatusIndicator","connect","ownProps","searchResults","searchResultsLoadingState","withStyles","theme","resultsCount","marginTop","textAlign","display","props","className","classes","states","inProgress","wrapperDiv","padding","boxSizing","overflow","breakpoints","down","root","width","maxWidth","minWidth","margin","resultsWrapper","backgroundColor","downloadWrapper","fontSize","color","cursor","borderRadius","downloadIcon","marginRight","marginBottom","helpButton","helpIcon","withRouter","useEffect","location","search","itemCount","elevation","style","justifyContent","paddingRight","onClick","csv","blob","Blob","url","window","URL","createObjectURL","a","document","createElement","setAttribute","body","appendChild","click","removeChild","handleDownloadSearchResults","title","buttonClass","iconClass","content","itemData","height","innerHeight","itemSize","dataset"],"mappings":"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","file":"static/js/19.75a3f6ea.chunk.js","sourcesContent":["\nconst stringify = require('.')\nconst {StringDecoder} = require('string_decoder')\n\nmodule.exports = function(records, options={}){\n  const data = []\n  if(Buffer.isBuffer(records)){\n    const decoder = new StringDecoder()\n    records = decoder.write(records)\n  }\n  const stringifier = new stringify.Stringifier(options)\n  stringifier.push = function(record){\n    if(record){\n      data.push(record.toString())\n    }\n  }\n  for(let record of records){\n    stringifier.write(record) \n  }\n  stringifier.end()\n  return data.join('')\n}\n","\n/*\nCSV Stringify\n\nPlease look at the [project documentation](https://csv.js.org/stringify/) for\nadditional information.\n*/\n\nconst { Transform } = require('stream')\nconst bom_utf8 = Buffer.from([239, 187, 191])\n\nclass Stringifier extends Transform {\n  constructor(opts = {}){\n    super({...{writableObjectMode: true}, ...opts})\n    const options = {}\n    let err\n    // Merge with user options\n    for(let opt in opts){\n      options[underscore(opt)] = opts[opt]\n    }\n    if(err = this.normalize(options)) throw err\n    switch(options.record_delimiter){\n      case 'auto':\n        options.record_delimiter = null\n        break\n      case 'unix':\n        options.record_delimiter = \"\\n\"\n        break\n      case 'mac':\n        options.record_delimiter = \"\\r\"\n        break\n      case 'windows':\n        options.record_delimiter = \"\\r\\n\"\n        break\n      case 'ascii':\n        options.record_delimiter = \"\\u001e\"\n        break\n      case 'unicode':\n        options.record_delimiter = \"\\u2028\"\n        break\n    }\n    // Expose options\n    this.options = options\n    // Internal state\n    this.state = {\n      stop: false\n    }\n    // Information\n    this.info = {\n      records: 0\n    }\n    if(options.bom === true){\n      this.push(bom_utf8)\n    }\n    this\n  }\n  normalize(options){\n    // Normalize option `bom`\n    if(options.bom === undefined || options.bom === null || options.bom === false){\n      options.bom = false\n    }else if(options.bom !== true){\n      return new CsvError('CSV_OPTION_BOOLEAN_INVALID_TYPE', [\n        'option `bom` is optional and must be a boolean value,',\n        `got ${JSON.stringify(options.bom)}`\n      ])\n    }\n    // Normalize option `delimiter`\n    if(options.delimiter === undefined || options.delimiter === null){\n      options.delimiter = ','\n    }else if(Buffer.isBuffer(options.delimiter)){\n      options.delimiter = options.delimiter.toString()\n    }else if(typeof options.delimiter !== 'string'){\n      return new CsvError('CSV_OPTION_DELIMITER_INVALID_TYPE', [\n        'option `delimiter` must be a buffer or a string,',\n        `got ${JSON.stringify(options.delimiter)}`\n      ])\n    }\n    // Normalize option `quote`\n    if(options.quote === undefined || options.quote === null){\n      options.quote = '\"'\n    }else if(options.quote === true){\n      options.quote = '\"'\n    }else if(options.quote === false){\n      options.quote = ''\n    }else if (Buffer.isBuffer(options.quote)){\n      options.quote = options.quote.toString()\n    }else if(typeof options.quote !== 'string'){\n      return new CsvError('CSV_OPTION_QUOTE_INVALID_TYPE', [\n        'option `quote` must be a boolean, a buffer or a string,',\n        `got ${JSON.stringify(options.quote)}`\n      ])\n    }\n    // Normalize option `quoted`\n    if(options.quoted === undefined || options.quoted === null){\n      options.quoted = false\n    }else{\n      // todo\n    }\n    // Normalize option `quoted_empty`\n    if(options.quoted_empty === undefined || options.quoted_empty === null){\n      options.quoted_empty = undefined\n    }else{\n      // todo\n    }\n    // Normalize option `quoted_match`\n    if(options.quoted_match === undefined || options.quoted_match === null || options.quoted_match === false){\n      options.quoted_match = null\n    }else if(!Array.isArray(options.quoted_match)){\n      options.quoted_match = [options.quoted_match]\n    }\n    if(options.quoted_match){\n      for(let quoted_match of options.quoted_match){\n        const isString = typeof quoted_match === 'string'\n        const isRegExp = quoted_match instanceof RegExp\n        if(!isString && !isRegExp){\n          return Error(`Invalid Option: quoted_match must be a string or a regex, got ${JSON.stringify(quoted_match)}`)\n        }\n      }\n    }\n    // Normalize option `quoted_string`\n    if(options.quoted_string === undefined || options.quoted_string === null){\n      options.quoted_string = false\n    }else{\n      // todo\n    }\n    // Normalize option `eof`\n    if(options.eof === undefined || options.eof === null){\n      options.eof = true\n    }else{\n      // todo\n    }\n    // Normalize option `escape`\n    if(options.escape === undefined || options.escape === null){\n      options.escape = '\"'\n    }else if(Buffer.isBuffer(options.escape)){\n      options.escape = options.escape.toString()\n    }else if(typeof options.escape !== 'string'){\n      return Error(`Invalid Option: escape must be a buffer or a string, got ${JSON.stringify(options.escape)}`)\n    }\n    if (options.escape.length > 1){\n      return Error(`Invalid Option: escape must be one character, got ${options.escape.length} characters`)\n    }\n    // Normalize option `header`\n    if(options.header === undefined || options.header === null){\n      options.header = false\n    }else{\n      // todo\n    }\n    // Normalize option `columns`\n    options.columns = this.normalize_columns(options.columns)\n    // Normalize option `quoted`\n    if(options.quoted === undefined || options.quoted === null){\n      options.quoted = false\n    }else{\n      // todo\n    }\n    // Normalize option `cast`\n    if(options.cast === undefined || options.cast === null){\n      options.cast = {}\n    }else{\n      // todo\n    }\n    // Normalize option cast.bigint\n    if(options.cast.bigint === undefined || options.cast.bigint === null){\n      // Cast boolean to string by default\n      options.cast.bigint = value => '' + value\n    }\n    // Normalize option cast.boolean\n    if(options.cast.boolean === undefined || options.cast.boolean === null){\n      // Cast boolean to string by default\n      options.cast.boolean = value => value ? '1' : ''\n    }\n    // Normalize option cast.date\n    if(options.cast.date === undefined || options.cast.date === null){\n      // Cast date to timestamp string by default\n      options.cast.date = value => '' + value.getTime()\n    }\n    // Normalize option cast.number\n    if(options.cast.number === undefined || options.cast.number === null){\n      // Cast number to string using native casting by default\n      options.cast.number = value => '' + value\n    }\n    // Normalize option cast.object\n    if(options.cast.object === undefined || options.cast.object === null){\n      // Stringify object as JSON by default\n      options.cast.object = value => JSON.stringify(value)\n    }\n    // Normalize option cast.string\n    if(options.cast.string === undefined || options.cast.string === null){\n      // Leave string untouched\n      options.cast.string = function(value){return value}\n    }\n    // Normalize option `record_delimiter`\n    if(options.record_delimiter === undefined || options.record_delimiter === null){\n      options.record_delimiter = '\\n'\n    }else if(Buffer.isBuffer(options.record_delimiter)){\n      options.record_delimiter = options.record_delimiter.toString()\n    }else if(typeof options.record_delimiter !== 'string'){\n      return Error(`Invalid Option: record_delimiter must be a buffer or a string, got ${JSON.stringify(options.record_delimiter)}`)\n    }\n  }\n  _transform(chunk, encoding, callback){\n    if(this.state.stop === true){\n      return\n    }\n    // Chunk validation\n    if(!Array.isArray(chunk) && typeof chunk !== 'object'){\n      this.state.stop = true\n      return callback(Error(`Invalid Record: expect an array or an object, got ${JSON.stringify(chunk)}`))\n    }\n    // Detect columns from the first record\n    if(this.info.records === 0){\n      if(Array.isArray(chunk)){\n        if(this.options.header === true && !this.options.columns){\n          this.state.stop = true\n          return callback(Error('Undiscoverable Columns: header option requires column option or object records'))\n        }\n      }else if(this.options.columns === undefined || this.options.columns === null){\n        this.options.columns = this.normalize_columns(Object.keys(chunk))\n      }\n    }\n    // Emit the header\n    if(this.info.records === 0){\n      this.headers()\n    }\n    // Emit and stringify the record if an object or an array\n    try{\n      this.emit('record', chunk, this.info.records)\n    }catch(err){\n      this.state.stop = true\n      return this.emit('error', err)\n    }\n    // Convert the record into a string\n    if(this.options.eof){\n      chunk = this.stringify(chunk)\n      if(chunk === undefined){\n        return\n      }else{\n        chunk = chunk + this.options.record_delimiter\n      }\n    }else{\n      chunk = this.stringify(chunk)\n      if(chunk === undefined){\n        return\n      }else{\n        if(this.options.header || this.info.records){\n          chunk = this.options.record_delimiter + chunk\n        }\n      }\n    }\n    // Emit the csv\n    this.info.records++\n    this.push(chunk)\n    callback()\n    null\n  }\n  _flush(callback){\n    if(this.info.records === 0){\n      this.headers()\n    }\n    callback()\n    null\n  }\n  stringify(chunk, chunkIsHeader=false){\n    if(typeof chunk !== 'object'){\n      return chunk\n    }\n    const {columns, header} = this.options\n    const record = []\n    // Record is an array\n    if(Array.isArray(chunk)){\n      // We are getting an array but the user has specified output columns. In\n      // this case, we respect the columns indexes\n      if(columns){\n        chunk.splice(columns.length)\n      }\n      // Cast record elements\n      for(let i=0; i<chunk.length; i++){\n        const field = chunk[i]\n        const [err, value] = this.__cast(field, {\n          index: i, column: i, records: this.info.records, header: chunkIsHeader\n        })\n        if(err){\n          this.emit('error', err)\n          return\n        }\n        record[i] = [value, field]\n      }\n    // Record is a literal object\n    }else{\n      if(columns){\n        for(let i=0; i<columns.length; i++){\n          const field = get(chunk, columns[i].key)\n          const [err, value] = this.__cast(field, {\n            index: i, column: columns[i].key, records: this.info.records, header: chunkIsHeader\n          })\n          if(err){\n            this.emit('error', err)\n            return\n          }\n          record[i] = [value, field]\n        }\n      }else{\n        for(let column of chunk){\n          const field = chunk[column]\n          const [err, value] = this.__cast(field, {\n            index: i, column: columns[i].key, records: this.info.records, header: chunkIsHeader\n          })\n          if(err){\n            this.emit('error', err)\n            return\n          }\n          record.push([value, field])\n        }\n      }\n    }\n    let csvrecord = ''\n    for(let i=0; i<record.length; i++){\n      let options, err\n      let [value, field] = record[i]\n      if(typeof value === \"string\"){\n        options = this.options\n      }else if(isObject(value)){\n        // let { value, ...options } = value\n        options = value\n        value = options.value\n        delete options.value\n        if(typeof value !== \"string\" && value !== undefined && value !== null){\n          this.emit(\"error\", Error(`Invalid Casting Value: returned value must return a string, null or undefined, got ${JSON.stringify(value)}`))\n          return\n        }\n        options = {...this.options, ...options}\n        if(err = this.normalize(options)){\n          this.emit(\"error\", err)\n          return\n        }\n      }else if(value === undefined || value === null){\n        options = this.options\n      }else{\n        this.emit(\"error\", Error(`Invalid Casting Value: returned value must return a string, an object, null or undefined, got ${JSON.stringify(value)}`))\n        return\n      }\n      const {delimiter, escape, quote, quoted, quoted_empty, quoted_string, quoted_match, record_delimiter} = options\n      if(value){\n        if(typeof value !== 'string'){\n          this.emit(\"error\", Error(`Formatter must return a string, null or undefined, got ${JSON.stringify(value)}`))\n          return null\n        }\n        const containsdelimiter = delimiter.length && value.indexOf(delimiter) >= 0\n        const containsQuote = (quote !== '') && value.indexOf(quote) >= 0\n        const containsEscape = value.indexOf(escape) >= 0 && (escape !== quote)\n        const containsRecordDelimiter = value.indexOf(record_delimiter) >= 0\n        const quotedString = quoted_string && typeof field === 'string'\n        let quotedMatch = quoted_match && quoted_match.filter( quoted_match => {\n          if(typeof quoted_match === 'string'){\n            return value.indexOf(quoted_match) !== -1\n          }else{\n            return quoted_match.test(value)\n          }\n        })\n        quotedMatch = quotedMatch && quotedMatch.length > 0\n        const shouldQuote = containsQuote === true || containsdelimiter || containsRecordDelimiter || quoted || quotedString || quotedMatch\n        if(shouldQuote === true && containsEscape === true){\n          const regexp = escape === '\\\\'\n          ? new RegExp(escape + escape, 'g')\n          : new RegExp(escape, 'g')\n          value = value.replace(regexp, escape + escape)\n        }\n        if(containsQuote === true){\n          const regexp = new RegExp(quote,'g')\n          value = value.replace(regexp, escape + quote)\n        }\n        if(shouldQuote === true){\n          value = quote + value + quote\n        }\n        csvrecord += value\n      }else if(quoted_empty === true || (field === '' && quoted_string === true && quoted_empty !== false)){\n        csvrecord += quote + quote\n      }\n      if(i !== record.length - 1){\n        csvrecord += delimiter\n      }\n    }\n    return csvrecord\n  }\n  headers(){\n    if(this.options.header === false){\n      return\n    }\n    if(this.options.columns === undefined){\n      return\n    }\n    let headers = this.options.columns.map(column => column.header)\n    if(this.options.eof){\n      headers = this.stringify(headers, true) + this.options.record_delimiter\n    }else{\n      headers = this.stringify(headers)\n    }\n    this.push(headers)\n  }\n  __cast(value, context){\n    const type = typeof value\n    try{\n      if(type === 'string'){ // Fine for 99% of the cases\n        return [undefined, this.options.cast.string(value, context)]\n      }else if(type === 'bigint'){\n        return [undefined, this.options.cast.bigint(value, context)]\n      }else if(type === 'number'){\n        return [undefined, this.options.cast.number(value, context)]\n      }else if(type === 'boolean'){\n        return [undefined, this.options.cast.boolean(value, context)]\n      }else if(value instanceof Date){\n        return [undefined, this.options.cast.date(value, context)]\n      }else if(type === 'object' && value !== null){\n        return [undefined, this.options.cast.object(value, context)]\n      }else{\n        return [undefined, value, value]\n      }\n    }catch(err){\n      return [err]\n    }\n  }\n  normalize_columns(columns){\n    if(columns === undefined || columns === null){\n      return undefined\n    }\n    if(typeof columns !== 'object'){\n      throw Error('Invalid option \"columns\": expect an array or an object')\n    }\n    if(!Array.isArray(columns)){\n      const newcolumns = []\n      for(let k in columns){\n        newcolumns.push({\n          key: k,\n          header: columns[k]\n        })\n      }\n      columns = newcolumns\n    }else{\n      const newcolumns = []\n      for(let column of columns){\n        if(typeof column === 'string'){\n          newcolumns.push({\n            key: column,\n            header: column\n          })\n        }else if(typeof column === 'object' && column !== undefined && !Array.isArray(column)){\n          if(!column.key){\n            throw Error('Invalid column definition: property \"key\" is required')\n          }\n          if(column.header === undefined){\n            column.header = column.key\n          }\n          newcolumns.push(column)\n        }else{\n          throw Error('Invalid column definition: expect a string or an object')\n        }\n      }\n      columns = newcolumns\n    }\n    return columns\n  }\n}\n\nconst stringify = function(){\n  let data, options, callback\n  for(let i in arguments){\n    const argument = arguments[i]\n    const type = typeof argument\n    if(data === undefined && (Array.isArray(argument))){\n      data = argument\n    }else if(options === undefined && isObject(argument)){\n      options = argument\n    }else if(callback === undefined && type === 'function'){\n      callback = argument\n    }else{\n      throw new CsvError('CSV_INVALID_ARGUMENT', [\n        'Invalid argument:',\n        `got ${JSON.stringify(argument)} at index ${i}`\n      ])\n    }\n  }\n  const stringifier = new Stringifier(options)\n  if(callback){\n    const chunks = []\n    stringifier.on('readable', function(){\n      let chunk\n      while((chunk = this.read()) !== null){\n        chunks.push(chunk)\n      }\n    })\n    stringifier.on('error', function(err){\n      callback(err)\n    })\n    stringifier.on('end', function(){\n      callback(undefined, chunks.join(''))\n    })\n  }\n  if(data !== undefined){\n    // Give a chance for events to be registered later\n    if(typeof setImmediate === 'function'){\n      setImmediate(function(){\n        for(let record of data){\n          stringifier.write(record)\n        }\n        stringifier.end()\n      })\n    }else{\n      for(let record of data){\n        stringifier.write(record)\n      }\n      stringifier.end()\n    }\n  }\n  return stringifier\n}\n\nclass CsvError extends Error {\n  constructor(code, message, ...contexts) {\n    if(Array.isArray(message)) message = message.join(' ')\n    super(message)\n    if(Error.captureStackTrace !== undefined){\n      Error.captureStackTrace(this, CsvError)\n    }\n    this.code = code\n    for(const context of contexts){\n      for(const key in context){\n        const value = context[key]\n        this[key] = Buffer.isBuffer(value) ? value.toString() : value == null ? value : JSON.parse(JSON.stringify(value))\n      }\n    }\n  }\n}\n\nstringify.Stringifier = Stringifier\n\nstringify.CsvError = CsvError\n\nmodule.exports = stringify\n\nconst isObject = function(obj){\n  return typeof obj === 'object' && obj !== null && ! Array.isArray(obj)\n}\n\nconst underscore = function(str){\n  return str.replace(/([A-Z])/g, function(_, match){\n    return '_' + match.toLowerCase()\n  })\n}\n\n// Lodash implementation of `get`\n\nconst charCodeOfDot = '.'.charCodeAt(0)\nconst reEscapeChar = /\\\\(\\\\)?/g\nconst rePropName = RegExp(\n  // Match anything that isn't a dot or bracket.\n  '[^.[\\\\]]+' + '|' +\n  // Or match property names within brackets.\n  '\\\\[(?:' +\n    // Match a non-string expression.\n    '([^\"\\'][^[]*)' + '|' +\n    // Or match strings (supports escaping characters).\n    '([\"\\'])((?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\.)*?)\\\\2' +\n  ')\\\\]'+ '|' +\n  // Or match \"\" as the space between consecutive dots or empty brackets.\n  '(?=(?:\\\\.|\\\\[\\\\])(?:\\\\.|\\\\[\\\\]|$))'\n, 'g')\nconst reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/\nconst reIsPlainProp = /^\\w*$/\nconst getTag = function(value){\n  if(!value)\n    value === undefined ? '[object Undefined]' : '[object Null]'\n  return Object.prototype.toString.call(value)\n}\nconst isKey = function(value, object){\n  if(Array.isArray(value)){\n    return false\n  }\n  const type = typeof value\n  if(type === 'number' || type === 'symbol' || type === 'boolean' || !value || isSymbol(value)){\n    return true\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object))\n}\nconst isSymbol = function(value){\n  const type = typeof value\n  return type === 'symbol' || (type === 'object' && value && getTag(value) === '[object Symbol]')\n}\nconst stringToPath = function(string){\n  const result = []\n  if(string.charCodeAt(0) === charCodeOfDot){\n    result.push('')\n  }\n  string.replace(rePropName, function(match, expression, quote, subString){\n    let key = match\n    if(quote){\n      key = subString.replace(reEscapeChar, '$1')\n    }else if(expression){\n      key = expression.trim()\n    }\n    result.push(key)\n  })\n  return result\n}\nconst castPath = function(value, object){\n  if(Array.isArray(value)){\n    return value\n  } else {\n    return isKey(value, object) ? [value] : stringToPath(value)\n  }\n}\nconst toKey = function(value){\n  if(typeof value === 'string' || isSymbol(value))\n    return value\n  const result = `${value}`\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result\n}\nconst get = function(object, path){\n  path = castPath(path, object)\n  let index = 0\n  const length = path.length\n  while(object != null && index < length){\n    object = object[toKey(path[index++])]\n  }\n  return (index && index === length) ? object : undefined\n}\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from \"react-router\";\r\n\r\nimport { withStyles, Paper, Typography, Link } from '@material-ui/core';\r\nimport { CloudDownload } from '@material-ui/icons';\r\n\r\nimport stringify from 'csv-stringify/lib/sync';\r\nimport queryString from 'query-string';\r\n\r\nimport { FixedSizeList } from 'react-window';\r\n\r\nimport SearchResult from './SearchResult';\r\n\r\nimport { searchResultsFetch, searchResultsStore, searchResultsSetLoadingState } from '../../Redux/actions/catalog';\r\n\r\nimport states from '../../Enums/asyncRequestStates';\r\n\r\nimport HelpButtonAndDialog from '../UI/HelpButtonAndDialog';\r\nimport buildSearchOptionsFromDatasetList from '../../Utility/Catalog/buildSearchOptionsFromDatasetList';\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    searchResults: state.searchResults,\r\n    searchResultsLoadingState: state.searchResultsLoadingState\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    searchResultsFetch,\r\n    searchResultsStore,\r\n    searchResultsSetLoadingState\r\n}\r\n\r\nconst styles = (theme) => ({\r\n    wrapperDiv: {\r\n        padding: '0 20px 20px 20px',\r\n        boxSizing: 'border-box',\r\n        overflow: 'hidden',\r\n        [theme.breakpoints.down('sm')]: {\r\n            padding: '0 0 20px 0'\r\n        },\r\n      },\r\n    \r\n      root: {\r\n        width: '60vw',\r\n        maxWidth: '1200px',\r\n        minWidth: '480px',\r\n        padding: '16px 24px',\r\n        margin: '8px auto 24px auto',\r\n    },\r\n\r\n    resultsWrapper: {\r\n        width: '60vw',\r\n        maxWidth: '1200px',\r\n        padding: '16px 24px',\r\n        margin: '8px auto 24px auto',\r\n        backgroundColor: 'transparent',\r\n        [theme.breakpoints.down('sm')]: {\r\n            padding: '12px 4px 20px 4px',\r\n            width: '90vw',\r\n        },\r\n    },   \r\n\r\n    downloadWrapper: {\r\n        fontSize: '1rem',\r\n        color: 'white',\r\n        marginTop: '-9px',\r\n        cursor: 'pointer',\r\n        borderRadius: '6px',\r\n        padding: '1px 8px',\r\n        '&:hover': {\r\n            backgroundColor: 'rgba(255, 255, 255, 0.1)'\r\n        }\r\n    },\r\n\r\n    downloadIcon: {\r\n        marginRight: '7px',\r\n        marginBottom: '-3px',\r\n        fontSize: '1.2rem'\r\n    },\r\n\r\n    helpButton: {\r\n        padding: '0 2px',\r\n        marginTop: '-9.5px',\r\n        color: 'white',\r\n        fontSize: '1.2rem'\r\n    },\r\n\r\n    helpIcon: {\r\n        color: 'white',\r\n        fontSize: '1.2rem'\r\n    }\r\n});\r\n\r\nconst _mapStateToProps = (state, ownProps) => ({\r\n    searchResults: state.searchResults,\r\n    searchResultsLoadingState: state.searchResultsLoadingState\r\n});\r\n\r\nconst _styles = (theme) => ({\r\n    resultsCount: {\r\n        marginTop: '-9px',\r\n        textAlign: 'left',\r\n        display: 'inline-block'\r\n    },\r\n})\r\n\r\nconst SearchResultStatusIndicator = connect(_mapStateToProps, null)(withStyles(_styles)((props) => {\r\n\r\n    return (\r\n        <Typography className={props.classes.resultsCount}>\r\n            {\r\n                props.searchResultsLoadingState === states.inProgress ?\r\n                'Searching...' :\r\n                `Found ${props.searchResults.length} datasets:`\r\n            }\r\n        </Typography>\r\n    )\r\n}));\r\n\r\nconst SearchResults = (props) => {\r\n    const { classes, searchResults, searchResultsSetLoadingState, searchResultsFetch, searchResultsStore } = props;\r\n\r\n    useEffect(() => {\r\n        searchResultsSetLoadingState(states.inProgress);\r\n        searchResultsFetch(props.location.search);\r\n\r\n        // return () => searchResultsStore([], buildSearchOptionsFromDatasetList([]));\r\n    }, [props.location.search]);\r\n\r\n    const handleDownloadSearchResults = () => {\r\n        let csv = stringify(searchResults, {\r\n            header: true\r\n        });\r\n    \r\n        const blob = new Blob([csv], {type: 'text/csv'});\r\n        const url = window.URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n        a.setAttribute('hidden', '');\r\n        a.setAttribute('href', url);\r\n        a.setAttribute('download', `CMAP_Search_Results.csv`);\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        document.body.removeChild(a);\r\n    }\r\n\r\n    const itemCount = searchResults && searchResults.length ? searchResults.length : 0;\r\n\r\n    return (\r\n        <div className={classes.wrapperDiv}>\r\n            <Paper className={classes.resultsWrapper} elevation={0}>\r\n                <div style={{display: 'flex', justifyContent: 'space-between'}}>\r\n                    <SearchResultStatusIndicator/>\r\n\r\n                    {   \r\n                        searchResults && searchResults.length ?\r\n                        <div style={{display: 'flex', justifyContent: 'space-between', paddingRight: '8px'}}>\r\n                            <Typography className={classes.downloadWrapper} onClick={() => handleDownloadSearchResults()}>\r\n                                <CloudDownload className={classes.downloadIcon}/>\r\n                                Download Search Results\r\n                            </Typography>\r\n\r\n                            <HelpButtonAndDialog\r\n                                title='Download Search Results'\r\n                                buttonClass={classes.helpButton}\r\n                                iconClass={classes.helpIcon}\r\n                                content={\r\n                                    <Typography>\r\n                                        This button will download a csv formatted file containing metadata for all datasets returned by your search.\r\n                                    </Typography>}\r\n                            />\r\n                        </div>\r\n\r\n                        : ''\r\n                    }               \r\n                    \r\n                </div>\r\n\r\n                <FixedSizeList\r\n                    itemData={searchResults}\r\n                    itemCount={itemCount}\r\n                    // height={itemCount * 222 || 500}\r\n                    height={window.innerHeight - 140}\r\n                    width='100%'\r\n                    itemSize={222}\r\n                >\r\n                    {({ index, style }) => (\r\n                        <div style={style}>\r\n                            <SearchResult dataset={searchResults[index]}/>\r\n                        </div>                        \r\n                    )}\r\n                </FixedSizeList>\r\n\r\n                {/* <div style={{minHeight: '70vh'}}>\r\n                    {\r\n                        searchResults.map(result => <SearchResult dataset={result} key={result.Short_Name}/>)\r\n                    }\r\n                </div> */}\r\n\r\n            </Paper>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(withRouter(SearchResults)));"],"sourceRoot":""}