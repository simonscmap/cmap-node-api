{"version":3,"sources":["Enums/metaTags.js","Utility/depthCounter.js","Components/UI/SkeletonWrapper.js","Components/Catalog/VariableGridHelpContents.js","Components/Catalog/DatasetPageAGGrid.js","Components/Catalog/DatasetJSONLD.js","Components/Catalog/DownloadingDataHelpContents.js","Components/Catalog/DownloadDialog.js","Utility/Catalog/datasetMetadataToDownloadFormat.js","Components/Catalog/DatasetFullPage.js"],"names":["metaTags","default","title","description","visualization","catalog","dataSubmission","community","darwinDepths","piscesDepths","piscesTable","Set","darwinTable","exports","count","field","depth1","depth2","table","data","Table_Name","has","i","length","SkeletonWrapper","props","loading","Fragment","children","map","child","key","VariableGridHelpContents","Typography","style","marginTop","src","margin","display","width","maxWidth","alt","CommentCellRenderer","withStyles","theme","dialogPaper","backgroundColor","colors","solidPaper","color","padding","markdown","primary","textDecoration","value","classes","React","useState","open","setOpen","Link","component","fontSize","lineHeight","onClick","Dialog","onClose","paper","source","className","columnDefs","headerName","tooltipField","cellRenderer","headername","hide","defaultColumnDef","cellStyle","menuTabs","suppressMovable","sortable","DatasetPageAGGrid","memo","Variables","quickSearch","setQuickSearch","TextField","gridSearch","type","variant","name","label","onChange","e","target","InputProps","startAdornment","InputAdornment","position","Search","HelpButtonAndDialog","content","buttonClass","helpButton","gridWrapper","height","maxHeight","defaultColDef","rowData","onGridReady","params","columnApi","autoSizeAllColumns","enableCellTextSelection","rowHeight","enableBrowserTooltips","cacheQuickFilter","quickFilterText","getContextMenuItems","icons","menu","ReactDOMServer","renderToString","Menu","sortAscending","ArrowUpward","sortDescending","ArrowDownward","frameworkComponents","commentCellRenderer","border","DatasetJSONLD","keywords","Array","from","Keywords","split","trim","Long_Name","Description","Short_Name","References","sensors","Sensor","Unit","Data_Source","Time_Min","Time_Max","slice","Lat_Min","Lon_Min","Lat_Max","Lon_Max","dangerouslySetInnerHTML","__html","JSON","stringify","mapDispatchToProps","csvDownloadRequestSend","dayToDate","min","days","Date","setDate","getDate","month","getMonth","day","getFullYear","dateToDay","date","Math","ceil","getTime","DownloadDialog","handleSetStartDate","parts","targetDate","parseInt","dataset","max","setState","state","time","handleSetEndDate","handleFullDatasetDownload","tableName","query","fileName","handleSubsetDownload","dt1","dt2","lat1","lat2","lon1","lon2","isMonthyClimatology","Boolean","Temporal_Resolution","temporalResolutions","monthlyClimatology","timeUnit","timeStart","timeEnd","Depth_Max","handleSliderChange","maxDays","lat","floor","lon","depth","Depth_Min","this","dialogOpen","handleClose","Spatial_Resolution","Row_Count","latMin","parseFloat","latMax","lonMin","lonMax","timeMin","parse","timeMax","subsetLat1","subsetLat2","subsetLon1","subsetLon2","subsetTime1","subsetTime2","datasetIsMonthlyClimatology","depthMin","depthMax","subsetDepth1","subsetDepth2","dateRatio","totalDataPoints","fullDataAvailable","totalDays","subsetDays","totalLatSize","latRatio","totalLonSize","lonRatio","depthRatio","depthUtils","totalDepthSize","subsetDepthSize","subsetDataPoints","subsetAvailable","timeString1","timeString2","PaperProps","DialogTitle","DialogContent","root","dialogRoot","Grid","container","formGrid","item","xs","md","formLabel","inputProps","input","InputLabelProps","shrink","Number","Slider","valueLabel","sliderValueLabel","thumb","sliderThumb","markLabel","slider","marks","step","disabled","DialogActions","Button","Component","connect","ownProps","datasets","top","background","palette","main","left","borderRadius","marginLeft","overflowY","closeDialogIcon","float","marginRight","datasetMetadataToDownloadFormat","metadata","datasetRows","push","dataset_short_name","dataset_long_name","dataset_version","Dataset_Version","dataset_release_date","Dataset_Release_Date","dataset_make","Make","dataset_source","dataset_distributor","Distributor","dataset_acknowledgement","Acknowledgement","dataset_history","Dataset_History","dataset_description","dataset_references","climatology","Climatology","cruise_names","Cruises","Name","forEach","variableRows","summaryStatisticsRows","var_short_name","Variable","var_long_name","var_sensor","var_unit","var_spatial_res","var_temporal_res","var_discipline","Study_Domain","visualize","Visualize","var_keywords","var_comment","Comment","Variable_Mean","Variable_STD","Variable_Min","Variable_Max","Variable_25th","Variable_50th","Variable_75th","datasetFullPageDataFetch","datasetFullPageDataStore","datasetFullPageDataLoadingState","datasetFullPageData","stickyPaper","paddingLeft","overflow","guideSection","textAlign","breakpoints","down","fontFamily","marginBottom","sectionHeader","fontWeight","navListItem","navListItemText","doiListItem","doiListItemText","doiListItemtextWrapper","navListItemtextWrapper","subListText","anchor","visibility","divider","sampleTableRow","navListSubItemText","navListSubSubItemText","outerContainer","smallText","referenceTypography","paddingTop","tableHead","variableLongName","pageHeader","helpIcon","cartButtonClass","textTransform","cruiseLink","Process_Level","Sensors","states","inProgress","downloadDialogOpen","setDownloadDialogOpen","useEffect","match","document","Paper","elevation","id","Table","size","TableBody","TableRow","TableCell","join","reactStringReplace","href","reference","RouterLink","to","fullPageData","workbook","XLSX","utils","book_new","book_append_sheet","json_to_sheet","writeFile","iconClass","CartAddOrRemove","Object","keys"],"mappings":"2GA2BeA,IA3BE,CACbC,QAAS,CACLC,MAAO,0CACPC,YAAa,4QAGjBC,cAAe,CACXF,MAAO,0BACPC,YAAa,+GAGjBE,QAAS,CACLH,MAAO,eACPC,YAAa,2GAGjBG,eAAgB,CACZJ,MAAO,uBACPC,YAAa,sFAGjBI,UAAW,CACPL,MAAO,iBACPC,YAAa,8H,iCCtBrB,IAAMK,EAAe,CACjB,EACA,GACA,GACA,GACA,GACA,GACA,GACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,MACA,QACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QACA,MACA,OACA,OACA,SACA,SACA,SACA,SACA,QACA,SACA,SACA,SACA,QACA,SACA,SACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,SAGEC,EAAe,CACjB,cACA,cACA,cACA,cACA,cACA,cACA,cACA,aACA,aACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,aACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,aACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,eAkBEC,EAAc,IAAIC,IAfF,CAClB,gBACA,2BAcEC,EAAc,IAAID,IAXH,CACjB,4BACA,sBACA,qBACA,iCACA,wBACA,0BACA,mCAMEE,EAAU,CACZC,MAAO,SAACC,EAAOC,EAAQC,GAAY,IACXC,EAAUH,EAAMI,KAA5BC,WACJN,EAAQ,EAEZ,GAAGJ,EAAYW,IAAIH,GACf,IAAI,IAAII,EAAI,EAAGA,EAAIb,EAAac,UACzBd,EAAaa,GAAKL,GADeK,IAEjCb,EAAaa,GAAKN,GAAQF,SAE9B,GAAIF,EAAYS,IAAIH,GACvB,IAAI,IAAII,EAAI,EAAGA,EAAId,EAAae,UACzBf,EAAac,GAAKL,GADeK,IAEjCd,EAAac,GAAKN,GAAQF,IAGrC,OAAOA,GAGXJ,cACAE,cACAH,eACAD,gBAGWK,O,iCCtJf,6BA6BeW,IAzBS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","file":"static/js/15.9dde93cc.chunk.js","sourcesContent":["const metaTags = {\r\n    default: {\r\n        title: 'Simons Collaborative Marine Ocean Atlas',\r\n        description: \"Simons Collaborative Marine Atlas Project is an open-source data portal interconnecting data sets across Oceanography disciplines. It enables scientists and the public to dive into the vast and often underutilized ocean datasets to retrieve custom subsets of data.\",\r\n    },\r\n\r\n    visualization: {\r\n        title: 'CMAP Data Visualization',\r\n        description: 'Generate scatter plots, heatmaps, cruise routes, and more using oceanographic data from from CMAP datasets.'\r\n    },\r\n\r\n    catalog: {\r\n        title: 'CMAP Catalog',\r\n        description: 'Search for oceanographic datasets in the CMAP database using keywords, or temporal or spatial coverage.'\r\n    },\r\n\r\n    dataSubmission: {\r\n        title: 'CMAP Data Submission',\r\n        description: 'Validate and submit your dataset. Track the progress of your previous submissions.'\r\n    },\r\n\r\n    community: {\r\n        title: 'CMAP Community',\r\n        description: 'Join the CMAP team on slack, follow us on github, or download the CMAP software package for Python, R, Julia, or MATLAB.'\r\n    }\r\n}\r\n\r\nexport default metaTags;","\r\nconst darwinDepths = [\r\n    5,\r\n    15,\r\n    25,\r\n    35,\r\n    45,\r\n    55,\r\n    65,\r\n    75.005,\r\n    85.025,\r\n    95.095,\r\n    105.31,\r\n    115.87,\r\n    127.15,\r\n    139.74,\r\n    154.47,\r\n    172.4,\r\n    194.735,\r\n    222.71,\r\n    257.47,\r\n    299.93,\r\n    350.68,\r\n    409.93,\r\n    477.47,\r\n    552.71,\r\n    634.735,\r\n    722.4,\r\n    814.47,\r\n    909.74,\r\n    1007.155,\r\n    1105.905,\r\n    1205.535,\r\n    1306.205,\r\n    1409.15,\r\n    1517.095,\r\n    1634.175,\r\n    1765.135,\r\n    1914.15,\r\n    2084.035,\r\n    2276.225,\r\n    2491.25,\r\n    2729.25,\r\n    2990.25,\r\n    3274.25,\r\n    3581.25,\r\n    3911.25,\r\n    4264.25,\r\n    4640.25,\r\n    5039.25,\r\n    5461.25,\r\n    5906.25\r\n]\r\n\r\nconst piscesDepths = [\r\n    0.494024991989,\r\n    1.54137504101,\r\n    2.64566898346,\r\n    3.81949496269,\r\n    5.07822418213,\r\n    6.44061422348,\r\n    7.92956018448,\r\n    9.5729970932,\r\n    11.404999733,\r\n    13.4671401978,\r\n    15.8100700378,\r\n    18.4955596924,\r\n    21.5988197327,\r\n    25.2114105225,\r\n    29.4447307587,\r\n    34.4341506958,\r\n    40.3440513611,\r\n    47.3736915588,\r\n    55.764289856,\r\n    65.8072662354,\r\n    77.8538513184,\r\n    92.3260726929,\r\n    109.729301453,\r\n    130.666000366,\r\n    155.850692749,\r\n    186.125595093,\r\n    222.475204468,\r\n    266.040313721,\r\n    318.127410889,\r\n    380.213012695,\r\n    453.937713623,\r\n    541.088928223,\r\n    643.566772461,\r\n    763.333129883,\r\n    902.339294434,\r\n    1062.43994141,\r\n    1245.29101562,\r\n    1452.25097656,\r\n    1684.28405762,\r\n    1941.89294434,\r\n    2225.07788086,\r\n    2533.3359375,\r\n    2865.70288086,\r\n    3220.82006836,\r\n    3597.03198242,\r\n    3992.48388672,\r\n    4405.22412109,\r\n    4833.29101562,\r\n    5274.78417969,\r\n    5727.91699219\r\n]\r\n\r\nconst _piscesTables = [\r\n    'tblPisces_NRT',\r\n    'tblPisces_NRT_Calendar'\r\n]\r\n\r\nconst _darwinTable = [\r\n    'tblDarwin_Chl_Climatology',\r\n    'tblDarwin_Ecosystem',\r\n    'tblDarwin_Nutrient',\r\n    'tblDarwin_Nutrient_Climatology',\r\n    'tblDarwin_Ocean_Color',\r\n    'tblDarwin_Phytoplankton',\r\n    'tblDarwin_Plankton_Climatology'\r\n]\r\n\r\nconst piscesTable = new Set(_piscesTables);\r\nconst darwinTable = new Set(_darwinTable);\r\n\r\nconst exports = {\r\n    count: (field, depth1, depth2) => {\r\n        const { Table_Name: table } = field.data;\r\n        var count = 0;\r\n    \r\n        if(piscesTable.has(table)) {\r\n            for(let i = 0; i < piscesDepths.length; i++){\r\n                if(piscesDepths[i] > depth2) break;\r\n                if(piscesDepths[i] > depth1) count ++; \r\n            }\r\n        } else if (darwinTable.has(table)) {\r\n            for(let i = 0; i < darwinDepths.length; i++){\r\n                if(darwinDepths[i] > depth2) break;\r\n                if(darwinDepths[i] > depth1) count ++; \r\n            }\r\n        } else {}\r\n        return count;\r\n    },\r\n\r\n    piscesTable,\r\n    darwinTable,\r\n    piscesDepths,\r\n    darwinDepths\r\n}\r\n\r\nexport default exports;","import React from 'react';\r\n\r\nimport { Skeleton } from '@material-ui/lab';\r\n\r\nconst SkeletonWrapper = (props) => {\r\n    return props.loading ?\r\n    (\r\n        <React.Fragment>\r\n            {props.children.map((child, i) => (\r\n                <Skeleton key={i}>\r\n                    {child}\r\n                </Skeleton>\r\n            ))}\r\n        </React.Fragment>\r\n    )\r\n\r\n    :\r\n\r\n    (\r\n        <React.Fragment>\r\n            {props.children.map((child, i) => (\r\n                <React.Fragment key={i}>\r\n                    {child}\r\n                </React.Fragment>\r\n            ))}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default SkeletonWrapper;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withStyles, Typography } from '@material-ui/core';\r\n\r\nconst VariableGridHelpContents = (props) => {\r\n\r\nreturn (\r\n    <React.Fragment>\r\n        <Typography>\r\n            This table contains information about the variables belonging to this dataset including general information,\r\n            temporal and spatial coverage, and summary statistics.\r\n        </Typography>\r\n\r\n        <Typography style={{marginTop: '12px'}}>\r\n            Enter a search term into the variable filter to quickly filter by variable name, sensor, or other keyword.\r\n        </Typography>\r\n\r\n        <img \r\n            src='/images/help_variable_grid_filter.png' \r\n            style={{\r\n                margin: '20px auto',\r\n                display: 'block',\r\n                width: '480px',\r\n                maxWidth: '80vw'\r\n            }}\r\n            alt='Using Quick Filter'\r\n        />\r\n\r\n        <Typography style={{marginTop: '12px'}}>\r\n            Click any column header to sort the table by the values in that column. Click again to reverse the sort order.\r\n        </Typography>\r\n\r\n        <img \r\n            src='/images/help_variable_grid_sort.gif' \r\n            style={{\r\n                margin: '20px auto',\r\n                display: 'block',\r\n                width: '400px',\r\n                maxWidth: '80vw'\r\n            }}\r\n            alt='Multiple Keyword Example'\r\n        />\r\n\r\n        <Typography style={{marginTop: '12px'}}>\r\n            To download the variable table in csv format right click on any cell and click CSV Export.\r\n        </Typography>\r\n\r\n        <img \r\n            src='/images/help_variable_grid_export.png' \r\n            style={{\r\n                margin: '20px auto',\r\n                display: 'block',\r\n                width: '480px',\r\n                maxWidth: '80vw'\r\n            }}\r\n            alt='Multiple Keyword Example'\r\n        />\r\n    </React.Fragment>\r\n)\r\n}\r\n\r\nexport default VariableGridHelpContents;","import React, { useState } from 'react';\r\nimport ReactDOMServer from 'react-dom/server';\r\n\r\nimport { withStyles, TextField, InputAdornment, Link, Dialog } from '@material-ui/core';\r\nimport { Search, Menu, ArrowUpward, ArrowDownward } from '@material-ui/icons';\r\n\r\nimport { AgGridReact } from 'ag-grid-react';\r\n\r\nimport ReactMarkdown from 'react-markdown';\r\n\r\nimport HelpButtonAndDialog from '../UI/HelpButtonAndDialog';\r\nimport VariableGridHelpContents from './VariableGridHelpContents';\r\n\r\nimport colors from '../../Enums/colors';\r\n\r\nconst rendererStyles = (theme) => ({\r\n    dialogPaper: {\r\n        backgroundColor: colors.solidPaper,\r\n        color: 'white',\r\n        padding: '12px'\r\n    },\r\n\r\n    markdown: {\r\n        '& img': {\r\n            maxWidth: '100%',\r\n            margin: '20px auto 20px auto',\r\n            display: 'block'\r\n        },\r\n        '& a': {\r\n            color: colors.primary,\r\n            textDecoration: 'none'\r\n        }\r\n    }\r\n})\r\n\r\nconst CommentCellRenderer = withStyles(rendererStyles)((props) => {\r\n    const { value, classes } = props;\r\n\r\n    const [ open, setOpen ] = React.useState(false);\r\n\r\n    return !props.value || (props.value && props.value.length) < 20 ? \r\n    (\r\n        props.value\r\n    ) \r\n\r\n    :\r\n\r\n    (\r\n        <React.Fragment>\r\n            <Link component='button' style={{color: colors.primary, fontSize: '12px', lineHeight: '38px'}} onClick={() => setOpen(true)}>\r\n                View Comment\r\n            </Link>\r\n\r\n            <Dialog open={open} onClose={() => setOpen(false)} classes={{paper: classes.dialogPaper}}>\r\n                <ReactMarkdown source={value} className={classes.markdown}/>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    )\r\n})\r\n\r\nconst columnDefs = [\r\n    {\r\n        headerName: 'General Information',\r\n        children: [\r\n            {headerName: 'Variable Name', field: 'Long_Name', tooltipField: 'Long_Name'},\r\n            {headerName: 'Short Name', field: 'Variable'},\r\n            {headerName: 'Sensor', field: 'Sensor'},\r\n            {headerName: 'Unit', field: 'Unit'},\r\n            {headerName: 'Comment', field: 'Comment', tooltipField: \"Comment\", cellRenderer: 'commentCellRenderer'}\r\n        ]\r\n    },\r\n\r\n    {\r\n        headerName: 'Coverage',\r\n        children: [\r\n            {headerName: 'Lat Start', field: 'Lat_Min'},\r\n            {headerName: 'Lat End', field: 'Lat_Max'},\r\n            {headerName: 'Lon Start', field: 'Lon_Min'},\r\n            {headerName: 'Long End', field: 'Lon_Max'},\r\n            {headerName: 'Time Start', field: 'Time_Min'},\r\n            {headerName: 'Time End', field: 'Time_Max'},\r\n            {headerName: 'Depth Start', field: 'Depth_Min'},\r\n            {headername: 'Depth End', field: 'Depth_Max'}\r\n        ]\r\n    },\r\n\r\n    {\r\n        headerName: 'Table Statistics',\r\n        children: [\r\n            {headerName: 'Database Row Count', field: 'Variable_Count'},\r\n            {headerName: 'Mean Value', field: 'Variable_Mean'},\r\n            {headerName: 'Min Value', field: 'Variable_Min'},\r\n            {headerName: 'Max Value', field: 'Variable_Max'},\r\n            {headerName: 'STD', field: 'Variable_STD'},\r\n            {headerName: '25th Quantile', field: 'Variable_25th'},\r\n            {headerName: '50th Quantile', field: 'Variable_50th'},\r\n            {headerName: '75th Quantile', field: 'Variable_75th'},\r\n            {headerName: 'Keywords', field: 'Keywords', hide: true}\r\n\r\n        ]\r\n    }\r\n]\r\n\r\nconst defaultColumnDef = {\r\n    cellStyle: {fontSize: '12px', lineHeight: '38px'},\r\n    menuTabs: [],\r\n    suppressMovable: true,\r\n    sortable: true\r\n}\r\n\r\n// const getMainMenuItems = ({ column }) => column.rowGroupActive ? ['rowUnGroup'] : ['rowGroup'];\r\n\r\nconst styles = (theme) => ({\r\n    gridWrapper: {\r\n        border: '1px solid black'\r\n    },\r\n\r\n    helpButton: {\r\n        margin: '0 0 -40px 6px'\r\n    }\r\n});\r\n\r\nconst DatasetPageAGGrid = React.memo((props) => {\r\n    const { Variables, classes } = props;\r\n    const [ quickSearch, setQuickSearch ] = useState('');\r\n\r\n    return (\r\n        <div>\r\n            <TextField              \r\n                className={classes.gridSearch}\r\n                margin=\"normal\"\r\n                type=\"text\"\r\n                variant='outlined'\r\n                name='quickSearch'\r\n                value={quickSearch}\r\n                label='Variable Filter'\r\n                onChange={(e) => setQuickSearch(e.target.value)}\r\n                InputProps={{\r\n                startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                    <Search style={{color:colors.primary}}/>\r\n                </InputAdornment>\r\n                ),\r\n                }}\r\n            />\r\n\r\n            <HelpButtonAndDialog\r\n                title='Variable Table'\r\n                content={<VariableGridHelpContents/>}\r\n                buttonClass={classes.helpButton}\r\n            />\r\n\r\n            <div className={classes.gridWrapper + \" ag-theme-material\"} style={{height: `${Variables.length * 60 + 200}px`, maxHeight: '600px'}}>\r\n\r\n                <AgGridReact\r\n                    columnDefs={columnDefs}\r\n                    defaultColDef={defaultColumnDef}\r\n                    rowData={Variables}\r\n                    onGridReady={(params) => params.columnApi.autoSizeAllColumns()}\r\n                    enableCellTextSelection={true}\r\n                    rowHeight={38}\r\n                    enableBrowserTooltips={true}\r\n                    cacheQuickFilter={true}\r\n                    quickFilterText={quickSearch}\r\n                    getContextMenuItems={() => ['copy', 'csvExport']}\r\n                    icons={{\r\n                        menu: ReactDOMServer.renderToString(<Menu style={{fontSize: '1.2rem', color: colors.primary}}/>),\r\n                        sortAscending: ReactDOMServer.renderToString(<ArrowUpward style={{fontSize: '1.2rem', color: colors.primary}}/>),\r\n                        sortDescending: ReactDOMServer.renderToString(<ArrowDownward style={{fontSize: '1.2rem', color: colors.primary}}/>),\r\n                    }}\r\n                    frameworkComponents={{commentCellRenderer: CommentCellRenderer}}\r\n                />\r\n            </div>\r\n        </div>\r\n        )\r\n})\r\n\r\nexport default withStyles(styles)(DatasetPageAGGrid);","import React from 'react';\r\n\r\nconst DatasetJSONLD = (props) => {\r\n    const keywords = props.keywords && props.keywords.length ? [...Array.from(new Set(props.Keywords.split(','))).map(e => e.trim()), 'oceanography'] : [];\r\n\r\n    let data = {\r\n        \"@context\":\"https://schema.org/\",\r\n        \"@type\":\"Dataset\",\r\n        \"name\": props.Long_Name,\r\n        \"description\": props.Description,\r\n        \"keywords\": keywords,\r\n        \"alternateName\": props.Short_Name,\r\n        \"citation\" : props.References || '',\r\n        \"measurementTechnique\" : props.sensors,\r\n        \"hasPart\" : props.Variables.map(e => ({\r\n            \"@type\": \"Dataset\",\r\n            \"name\": e.Long_Name,\r\n            \"description\": `${e.Long_Name} measured via ${e.Sensor} in ${e.Unit}. Part of dataset ${props.Long_Name}`,\r\n            \"creator\":{\r\n                \"@type\":\"Organization\",\r\n                \"name\": props.Data_Source\r\n            },\r\n        })),\r\n        \"creator\":{\r\n            \"@type\":\"Organization\",\r\n            \"name\": props.Data_Source\r\n        },\r\n        \"includedInDataCatalog\":{\r\n            \"@type\":\"DataCatalog\",\r\n            \"name\":\"simonscmap.com\"\r\n        },\r\n        \"temporalCoverage\": props.Time_Min && props.Time_Max ? `${props.Time_Min.slice(0,10)}/${props.Time_Max.slice(0,10)}` : '',\r\n        \"spatialCoverage\":{\r\n            \"@type\":\"Place\",\r\n            \"geo\":{\r\n                \"@type\": \"GeoShape\",\r\n                \"box\": `${props.Lat_Min} ${props.Lon_Min} ${props.Lat_Max} ${props.Lon_Max}`\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <script type=\"application/ld+json\" dangerouslySetInnerHTML={{__html: JSON.stringify(data)}}/>\r\n    )\r\n}\r\n\r\nexport default DatasetJSONLD;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withStyles, Typography } from '@material-ui/core';\r\n\r\nconst styles = (theme) => ({\r\n\r\n});\r\n\r\nconst DownloadingDataHelpContents = (props) => {\r\n    const { classes } = props;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Typography>\r\n                This component allows you to download a csv file containing data from this dataset. Depending on the size of the dataset you may be able to \r\n                download it in its entirety, or may need to specify a subset using the sliders or form fields, the minimum and maximum values of which\r\n                represent the dataset's spatial and temporal boundaries.\r\n            </Typography>\r\n\r\n            <Typography>\r\n                If the subset is too large you will see text instructing you to reduce the size of the subset, as below:\r\n            </Typography>\r\n\r\n            <img \r\n                src='/images/help_catalog_downloading_data_too_large.png' \r\n                style={{\r\n                    margin: '20px auto',\r\n                    display: 'block',\r\n                    width: '480px',\r\n                    maxWidth: '80vw'\r\n                }}\r\n                alt='Subset Too Large Example'\r\n            />\r\n\r\n            <Typography>\r\n                Adjust the any of subset parameters until the download size is within the allowed range, and click \"Download Subset\":\r\n            </Typography>\r\n\r\n            <img \r\n                src='/images/help_catalog_downloading_data_valid.png' \r\n                style={{\r\n                    margin: '20px auto',\r\n                    display: 'block',\r\n                    width: '480px',\r\n                    maxWidth: '80vw'\r\n                }}\r\n                alt='Valid Download Example'\r\n            />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default withStyles(styles)(DownloadingDataHelpContents);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport { TextField, Grid, Dialog, DialogTitle, DialogContent, DialogActions, Button, Typography, Slider, IconButton } from '@material-ui/core';\r\nimport { Close } from '@material-ui/icons';\r\n\r\nimport HelpButtonAndDialog from '../UI/HelpButtonAndDialog';\r\nimport DownloadingDataHelpContents from './DownloadingDataHelpContents';\r\n\r\nimport { csvDownloadRequestSend } from '../../Redux/actions/visualization';\r\n\r\nimport colors from '../../Enums/colors';\r\nimport temporalResolutions from '../../Enums/temporalResolutions';\r\nimport depthUtils from '../../Utility/depthCounter';\r\n\r\nconst styles = (theme) => ({\r\n    dialogPaper: {\r\n        backgroundColor: colors.solidPaper,\r\n        '@media (max-width: 600px)': {\r\n            width: '100vw',\r\n            margin: '12px'\r\n        },\r\n        width: '60vw'\r\n    },\r\n\r\n    sliderValueLabel: {\r\n        top: -22,\r\n        '& *': {\r\n            background: 'transparent',\r\n            color: theme.palette.primary.main,\r\n        },\r\n        left: -14\r\n    },\r\n\r\n    slider: {\r\n        margin: '4px 8px 8px 0px'\r\n    },\r\n\r\n    sliderThumb: {\r\n        borderRadius: '0px',\r\n        height: '16px',\r\n        width: '3px',\r\n        marginLeft: 0,\r\n        marginTop: '-7px'\r\n    },\r\n\r\n    dialogRoot: {\r\n        overflowY: 'visible'\r\n    },\r\n\r\n    markLabel: {\r\n        top: 30,\r\n        fontSize: '.7rem'\r\n    },\r\n\r\n    input: {\r\n        fontSize: '13px',\r\n        padding: '2px 0'\r\n    },\r\n\r\n    formGrid: {\r\n        marginTop: '16px'\r\n    },\r\n\r\n    formLabel: {\r\n        marginTop: '13px',\r\n        fontSize: '.92rem'\r\n    },\r\n\r\n    helpButton: {\r\n        marginTop: '-2px'\r\n    },\r\n\r\n    closeDialogIcon: {\r\n        float: 'right',\r\n        marginTop: '-12px',\r\n        marginRight: '-8px'\r\n    }\r\n})\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    datasets: state.datasets,\r\n    catalog: state.catalog\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    csvDownloadRequestSend\r\n}\r\n\r\nconst dayToDate = (min, days) => {\r\n    let value = new Date(min);\r\n    value.setDate(value.getDate() + days);\r\n\r\n    let month = value.getMonth() + 1;\r\n    month = month > 9 ? month : '0' + month;\r\n\r\n    let day = value.getDate();\r\n    day = day > 9 ? day : '0' + day;\r\n\r\n    return `${value.getFullYear()}-${month}-${day}`;\r\n}\r\n\r\nconst dateToDay = (min, date) => Math.ceil((new Date(date).getTime() - new Date(min).getTime()) / 86400000);\r\n\r\nclass DownloadDialog extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        const maxDays = Math.ceil((new Date(this.props.dataset.Time_Max).getTime() - new Date(this.props.dataset.Time_Min).getTime()) / 86400000);\r\n\r\n        this.state = {\r\n            lat: [\r\n                Math.floor(this.props.dataset.Lat_Min * 10) / 10, \r\n                Math.ceil(this.props.dataset.Lat_Max * 10) / 10\r\n            ],\r\n            lon: [\r\n                Math.floor(this.props.dataset.Lon_Min * 10) / 10, \r\n                Math.ceil(this.props.dataset.Lon_Max * 10) / 10\r\n            ],\r\n            time: this.props.dataset.Time_Min ? [\r\n                0,\r\n                maxDays\r\n            ]\r\n                : [1, 12],\r\n            depth: [\r\n                Math.floor(this.props.dataset.Depth_Min), \r\n                Math.ceil(this.props.dataset.Depth_Max)\r\n            ],\r\n            maxDays\r\n        }\r\n    }\r\n\r\n    handleSetStartDate = (e) => {\r\n        if(!e.target.value) return;\r\n        let parts = e.target.value.split('-');\r\n        const targetDate = new Date(parts[0], parseInt(parts[1]) - 1, parts[2]);\r\n        let min = new Date(this.props.dataset.Time_Min);\r\n        let max = new Date(this.props.dataset.Time_Max);\r\n        const target = targetDate < min ? min : targetDate > max ? max : targetDate;\r\n        this.setState({...this.state, time: [dateToDay(this.props.dataset.Time_Min, target), this.state.time[1]]});\r\n    }\r\n\r\n    handleSetEndDate = (e) => {\r\n        if(!e.target.value) return;\r\n        let parts = e.target.value.split('-');\r\n        const targetDate = new Date(parts[0], parseInt(parts[1]) - 1, parts[2]);\r\n        let min = new Date(this.props.dataset.Time_Min);\r\n        let max = new Date(this.props.dataset.Time_Max);\r\n        const target = targetDate < min ? min : targetDate > max ? max : targetDate;\r\n        this.setState({...this.state, time: [this.state.time[0], dateToDay(this.props.dataset.Time_Min, target)]});\r\n    }\r\n\r\n    handleFullDatasetDownload = (tableName) => {\r\n        let query = `select%20*%20from%20${tableName}`;\r\n        const fileName = this.props.dataset.Long_Name;\r\n        this.props.csvDownloadRequestSend(query, fileName, tableName);\r\n    }\r\n\r\n    handleSubsetDownload = (tableName, dt1, dt2, lat1, lat2, lon1, lon2, depth1, depth2) => {\r\n        let isMonthyClimatology = Boolean(this.props.dataset.Temporal_Resolution === temporalResolutions.monthlyClimatology);\r\n        const timeUnit = isMonthyClimatology ? 'month' : 'time';\r\n        const timeStart = isMonthyClimatology ? new Date(dt1).getMonth() + 1 : dt1;\r\n        const timeEnd = isMonthyClimatology ? new Date(dt2).getMonth() + 1 : dt2;\r\n        // + 'T23:59:59Z'\r\n        let query = `select * from ${tableName} where ${timeUnit} between '${timeStart}' and '${timeEnd}' and ` +\r\n            `lat between ${lat1} and ${lat2} and ` +\r\n            `lon between ${lon1} and ${lon2}`;\r\n\r\n        if(Boolean(this.props.dataset.Depth_Max)){\r\n            query += ` and depth between ${depth1} and ${depth2}`\r\n        }\r\n\r\n        const fileName = this.props.dataset.Long_Name;\r\n        this.props.csvDownloadRequestSend(query, fileName, tableName);\r\n    }\r\n\r\n    handleSliderChange = (key, value) => {\r\n        this.setState({...this.state, [key]: value});\r\n    }\r\n\r\n    render() {\r\n        const { dataset, dialogOpen, handleClose, classes } = this.props;\r\n        const { \r\n            Lat_Min, \r\n            Lat_Max, \r\n            Lon_Min, \r\n            Lon_Max, \r\n            Time_Min, \r\n            Time_Max, \r\n            Depth_Min, \r\n            Depth_Max,\r\n            Spatial_Resolution,\r\n            Temporal_Resolution,\r\n            Table_Name,\r\n            Row_Count\r\n        } = dataset;\r\n\r\n        const { lat, lon, time, depth } = this.state;\r\n\r\n        const latMin = parseFloat(Lat_Min);\r\n        const latMax = parseFloat(Lat_Max);\r\n        const lonMin = parseFloat(Lon_Min);\r\n        const lonMax = parseFloat(Lon_Max);\r\n        const timeMin = Date.parse(Time_Min);\r\n        const timeMax = Date.parse(Time_Max);\r\n\r\n        const subsetLat1 = lat[0];\r\n        const subsetLat2 = lat[1];\r\n        const subsetLon1 = lon[0];\r\n        const subsetLon2 = lon[1];\r\n        const subsetTime1 = time[0];\r\n        const subsetTime2 = time[1];\r\n\r\n        const datasetIsMonthlyClimatology = Temporal_Resolution === temporalResolutions.monthlyClimatology;\r\n\r\n        if(Depth_Max){\r\n            var depthMin = parseFloat(Depth_Min);\r\n            var depthMax = parseFloat(Depth_Max);\r\n\r\n            var subsetDepth1 = depth[0]\r\n\r\n            var subsetDepth2 = depth[1];\r\n        }    \r\n            \r\n        const variableColumns = dataset.Variables && dataset.Variables.length;\r\n        const depthColumns = dataset.Depth_Max ? 1 : 0;\r\n        const fixedColumns = 3;\r\n\r\n        const totalColumns = variableColumns + depthColumns + fixedColumns;\r\n\r\n        const totalDataPoints = Row_Count * totalColumns;\r\n        const fullDataAvailable = totalDataPoints < 20000000;\r\n\r\n        var dateRatio;\r\n\r\n        if(Temporal_Resolution === temporalResolutions.monthlyClimatology){\r\n            dateRatio = (time[1] - time[0] + 1) / 12;\r\n        } else {\r\n            var totalDays = (timeMax - timeMin) / 86400000 || 1;\r\n            var subsetDays = subsetTime2 - subsetTime1 < 1 ? 1 : subsetTime2 - subsetTime1;\r\n            dateRatio = totalDays > subsetDays ? subsetDays / totalDays : 1;\r\n        }\r\n\r\n        const totalLatSize = (latMax - latMin) || 1;\r\n        const subsetLatSize = subsetLat2 - subsetLat1 || 1 / totalLatSize;\r\n        const latRatio = subsetLatSize / totalLatSize;\r\n\r\n        const totalLonSize = (lonMax - lonMin) || 1;\r\n        const subsetLonSize = subsetLon2 - subsetLon1 || 1 / totalLonSize;\r\n        const lonRatio = subsetLonSize / totalLonSize;\r\n\r\n        var depthRatio = 1;\r\n\r\n        if(Depth_Max) {\r\n            if(depthUtils.piscesTable.has(Table_Name)){\r\n                let depthCount = depthUtils.count({data: dataset}, subsetDepth1, subsetDepth2);\r\n                depthRatio = depthCount / depthUtils.piscesDepths.length || 1;\r\n            } else if (depthUtils.darwinTable.has(Table_Name)){\r\n                let depthCount = depthUtils.count({data: dataset}, subsetDepth1, subsetDepth2);\r\n                depthRatio = depthCount / depthUtils.darwinDepths.length || 1;\r\n            } else {\r\n                var totalDepthSize = depthMax - depthMin || 1;\r\n                var subsetDepthSize = subsetDepth2 - subsetDepth1 || 1;\r\n                depthRatio = subsetDepthSize > totalDepthSize ? 1 : subsetDepthSize / totalDepthSize;\r\n            }\r\n        }\r\n\r\n        const subsetDataPoints = Math.floor(totalDataPoints * dateRatio * latRatio * lonRatio * depthRatio);\r\n\r\n        const subsetAvailable = subsetDataPoints <= 20000000;\r\n\r\n        const timeString1 = datasetIsMonthlyClimatology ? time[0] : dayToDate(Time_Min, subsetTime1);\r\n        const timeString2 = datasetIsMonthlyClimatology ? time[1] : dayToDate(Time_Min, subsetTime2);\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Dialog\r\n                    PaperProps={{\r\n                        className:classes.dialogPaper\r\n                    }}\r\n                    open={dialogOpen} \r\n                    onClose={handleClose} \r\n                    maxWidth={false}\r\n                >\r\n                    {/* <IconButton className={classes.closeDialogIcon} color=\"inherit\" onClick={handleClose} disableFocusRipple disableRipple>\r\n                        <Close/>\r\n                    </IconButton> */}\r\n                    <DialogTitle>Downloading {dataset.Long_Name} \r\n                        <HelpButtonAndDialog\r\n                            title='Downloading Data'\r\n                            content={<DownloadingDataHelpContents/>}\r\n                            buttonClass={classes.helpButton}\r\n                        />\r\n                    </DialogTitle>\r\n                    \r\n                    <DialogContent style={{padding: '0px 40px'}} classes={{root: classes.dialogRoot}}>\r\n                        <Typography>\r\n                            {fullDataAvailable ? \r\n                                `The full dataset is available for download.` :\r\n                                `The full dataset is too large for download.`\r\n                            }\r\n                        </Typography>\r\n                        <Typography>\r\n                            {subsetAvailable ? \r\n                                'The subset described below is available for download.' :\r\n                                `The subset described below contains approximately ${subsetDataPoints} data points. Maximum download size is 20000000. Please reduce the range of one or more parameters.`\r\n                            }\r\n                        </Typography>\r\n\r\n                        {\r\n                            datasetIsMonthlyClimatology ? \r\n                            \r\n                            <>\r\n                            <Grid container className={classes.formGrid}>\r\n                                    <Grid item xs={12} md={4}>\r\n                                        <Typography className={classes.formLabel}>\r\n                                            Month\r\n                                        </Typography>\r\n                                    </Grid>\r\n\r\n                                    <Grid item xs={6} md={4}>\r\n                                        <TextField\r\n                                            label=\"Start\"\r\n                                            type=\"number\"\r\n                                            inputProps={{\r\n                                                min: 1,\r\n                                                max: 12,\r\n                                                className: classes.input\r\n                                            }}\r\n                                            InputLabelProps={{\r\n                                                shrink: true,\r\n                                            }}\r\n                                            value={time[0]}\r\n                                            onChange={e => this.handleSliderChange('time', [e.target.value === '' ? '' : Number(e.target.value), time[1]])}\r\n                                        />\r\n                                    </Grid>\r\n\r\n                                    <Grid item xs={6} md={4}>\r\n                                        <TextField\r\n                                            label=\"End\"\r\n                                            type=\"number\"\r\n                                            inputProps={{\r\n                                                min: 1,\r\n                                                max: 12,\r\n                                                className: classes.input\r\n                                            }}\r\n                                            InputLabelProps={{\r\n                                                shrink: true,\r\n                                            }}\r\n                                            value={time[1]}\r\n                                            onChange={e => this.handleSliderChange('time', [time[0], e.target.value === '' ? '' : Number(e.target.value)])}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n\r\n                                <Slider\r\n                                    min={1}\r\n                                    max={12}\r\n                                    value={[typeof time[0] === 'number' ? time[0] : 1, typeof time[1] === 'number' ? time[1] : 12]}\r\n                                    value={this.state.time}\r\n                                    onChange={(e, value) => this.handleSliderChange('time', value)}\r\n                                    classes={{\r\n                                        valueLabel: classes.sliderValueLabel,\r\n                                        thumb: classes.sliderThumb,\r\n                                        markLabel: classes.markLabel\r\n                                    }}\r\n                                    className={classes.slider}\r\n                                    marks={[\r\n                                        {\r\n                                            value: 1,\r\n                                            label: '1'\r\n                                        },\r\n                                        {\r\n                                            value: 12,\r\n                                            label: '12'\r\n                                        }\r\n                                    ]}\r\n                                />\r\n                            </>\r\n\r\n                            :\r\n\r\n                            <>\r\n                                <Grid container className={classes.formGrid}>\r\n                                    <Grid item xs={12} md={4}>\r\n                                        <Typography className={classes.formLabel}>\r\n                                            Date\r\n                                        </Typography>\r\n                                    </Grid>\r\n\r\n                                    <Grid item xs={6} md={4}>\r\n                                        <TextField\r\n                                            label=\"Start\"\r\n                                            type=\"date\"\r\n                                            inputProps={{\r\n                                                className: classes.input\r\n                                            }}\r\n                                            InputLabelProps={{\r\n                                                shrink: true,\r\n                                            }}\r\n                                            value={dayToDate(Time_Min, this.state.time[0])}\r\n                                            onChange={this.handleSetStartDate}\r\n                                        />\r\n                                    </Grid>\r\n\r\n                                    <Grid item xs={6} md={4}>\r\n                                        <TextField\r\n                                            label=\"End\"\r\n                                            type=\"date\"\r\n                                            inputProps={{\r\n                                                className: classes.input\r\n                                            }}\r\n                                            InputLabelProps={{\r\n                                                shrink: true,\r\n                                            }}\r\n                                            value={dayToDate(Time_Min, this.state.time[1])}\r\n                                            onChange={this.handleSetEndDate}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n\r\n                                <Slider\r\n                                    min={0}\r\n                                    max={this.state.maxDays}\r\n                                    value={this.state.time}\r\n                                    onChange={(e, value) => this.handleSliderChange('time', value)}\r\n                                    classes={{\r\n                                        valueLabel: classes.sliderValueLabel,\r\n                                        thumb: classes.sliderThumb,\r\n                                        markLabel: classes.markLabel\r\n                                    }}\r\n                                    className={classes.slider}\r\n                                    marks={[\r\n                                        {\r\n                                            value: 0,\r\n                                            label: dayToDate(Time_Min, 0)\r\n                                        },\r\n                                        {\r\n                                            value: this.state.maxDays,\r\n                                            label: dayToDate(Time_Min, this.state.maxDays)\r\n                                        }\r\n                                    ]}\r\n                                />\r\n                            </>\r\n                        }\r\n\r\n                        <Grid container className={classes.formGrid}>\r\n                            <Grid item xs={12} md={4}>\r\n                                <Typography className={classes.formLabel}>\r\n                                    Latitude[{'\\xB0'}]\r\n                                </Typography>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={6} md={4}>\r\n                                <TextField\r\n                                    label=\"Start\"\r\n                                    type=\"number\"\r\n                                    inputProps={{\r\n                                        step: .1,\r\n                                        min: Math.floor(Lat_Min * 10) / 10,\r\n                                        max: Math.ceil(Lat_Max * 10) / 10,\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    value={lat[0]}\r\n                                    onChange={e => this.handleSliderChange('lat', [e.target.value === '' ? '' : Number(e.target.value), lat[1]])}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item xs={6} md={4}>\r\n                                <TextField\r\n                                    label=\"End\"\r\n                                    type=\"number\"\r\n                                    inputProps={{\r\n                                        step: .1,\r\n                                        min: Math.floor(Lat_Min * 10) / 10,\r\n                                        max: Math.ceil(Lat_Max * 10) / 10,\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    value={lat[1]}\r\n                                    onChange={e => this.handleSliderChange('lat', [lat[0], e.target.value === '' ? '' : Number(e.target.value)])}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Slider\r\n                            min={Math.floor(Lat_Min * 10) / 10}\r\n                            max={Math.ceil(Lat_Max * 10) / 10}\r\n                            step={.1}\r\n                            value={[typeof lat[0] === 'number' ? lat[0] : -90, typeof lat[1] === 'number' ? lat[1] : 90]}\r\n                            onChange={(e, value) => this.handleSliderChange('lat', value)}\r\n                            classes={{\r\n                                valueLabel: classes.sliderValueLabel,\r\n                                thumb: classes.sliderThumb,\r\n                                markLabel: classes.markLabel\r\n                            }}\r\n                            className={classes.slider}\r\n                            disabled={Lat_Min === Lat_Max}\r\n                            marks={[\r\n                                {\r\n                                    value: Math.floor(Lat_Min * 10) / 10,\r\n                                    label: `${Math.floor(Lat_Min * 10) / 10}`\r\n                                },\r\n                                {\r\n                                    value: Math.ceil(Lat_Max * 10) / 10,\r\n                                    label: `${Math.ceil(Lat_Max * 10) / 10}`\r\n                                }\r\n                            ]}\r\n                        />\r\n\r\n                        <Grid container className={classes.formGrid}>\r\n                            <Grid item xs={12} md={4}>\r\n                                <Typography className={classes.formLabel}>\r\n                                    Longitude[{'\\xB0'}]\r\n                                </Typography>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={6} md={4}>\r\n                                <TextField\r\n                                    label=\"Start\"\r\n                                    type=\"number\"\r\n                                    inputProps={{\r\n                                        step: .1,\r\n                                        min: Math.floor(Lon_Min * 10) / 10,\r\n                                        max: Math.ceil(Lon_Max * 10) / 10,\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    value={lon[0]}\r\n                                    onChange={e => this.handleSliderChange('lon', [e.target.value === '' ? '' : Number(e.target.value), lon[1]])}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item xs={6} md={4}>\r\n                                <TextField\r\n                                    label=\"End\"\r\n                                    type=\"number\"\r\n                                    inputProps={{\r\n                                        step: .1,\r\n                                        min: Math.floor(Lon_Min * 10) / 10,\r\n                                        max: Math.ceil(Lon_Max * 10) / 10,\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    value={lon[1]}\r\n                                    onChange={e => this.handleSliderChange('lon', [lon[0], e.target.value === '' ? '' : Number(e.target.value)])}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Slider\r\n                            min={Math.floor(Lon_Min * 10) / 10}\r\n                            max={Math.ceil(Lon_Max * 10) / 10}\r\n                            step={.1}\r\n                            value={[typeof lon[0] === 'number' ? lon[0] : -90, typeof lon[1] === 'number' ? lon[1] : 90]}\r\n                            onChange={(e, value) => this.handleSliderChange('lon', value)}\r\n                            classes={{\r\n                                valueLabel: classes.sliderValueLabel,\r\n                                thumb: classes.sliderThumb,\r\n                                markLabel: classes.markLabel\r\n                            }}\r\n                            className={classes.slider}\r\n                            disabled={Lon_Min === Lon_Max}\r\n                            marks={[\r\n                                {\r\n                                    value: Math.floor(Lon_Min * 10) / 10,\r\n                                    label: `${Math.floor(Lon_Min * 10) / 10}`\r\n                                },\r\n                                {\r\n                                    value: Math.ceil(Lon_Max * 10) / 10,\r\n                                    label: `${Math.ceil(Lon_Max * 10) / 10}`\r\n                                }\r\n                            ]}\r\n                        />\r\n\r\n                        {\r\n                            Depth_Max ?\r\n                            <>\r\n                                <Grid container className={classes.formGrid}>\r\n                                    <Grid item xs={12} md={4}>\r\n                                        <Typography className={classes.formLabel}>\r\n                                            Depth[m]\r\n                                        </Typography>\r\n                                    </Grid>\r\n\r\n                                    <Grid item xs={6} md={4}>\r\n                                        <TextField\r\n                                            label=\"Start\"\r\n                                            type=\"number\"\r\n                                            inputProps={{\r\n                                                min: Math.floor(Depth_Min),\r\n                                                max: Math.ceil(Depth_Max),\r\n                                                className: classes.input\r\n                                            }}\r\n                                            InputLabelProps={{\r\n                                                shrink: true,\r\n                                            }}\r\n                                            value={depth[0]}\r\n                                            onChange={e => this.handleSliderChange('depth', [e.target.value === '' ? '' : Number(e.target.value), depth[1]])}\r\n                                        />\r\n                                    </Grid>\r\n\r\n                                    <Grid item xs={6} md={4}>\r\n                                        <TextField\r\n                                            label=\"End\"\r\n                                            type=\"number\"\r\n                                            inputProps={{\r\n                                                min: Math.floor(Depth_Min),\r\n                                                max: Math.ceil(Depth_Max),\r\n                                                className: classes.input\r\n                                            }}\r\n                                            InputLabelProps={{\r\n                                                shrink: true,\r\n                                            }}\r\n                                            value={depth[1]}\r\n                                            onChange={e => this.handleSliderChange('depth', [lat[0], e.target.value === '' ? '' : Number(e.target.value)])}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n\r\n                                <Slider\r\n                                    min={Math.floor(Depth_Min)}\r\n                                    max={Math.ceil(Depth_Max)}\r\n                                    value={[typeof depth[0] === 'number' ? depth[0] : -90, typeof depth[1] === 'number' ? depth[1] : 90]}\r\n                                    onChange={(e, value) => this.handleSliderChange('depth', value)}\r\n                                    classes={{\r\n                                        valueLabel: classes.sliderValueLabel,\r\n                                        thumb: classes.sliderThumb,\r\n                                        markLabel: classes.markLabel\r\n                                    }}\r\n                                    className={classes.slider}\r\n                                    marks={[\r\n                                        {\r\n                                            value: Math.floor(Depth_Min),\r\n                                            label: `${Math.floor(Depth_Min)}`\r\n                                        },\r\n                                        {\r\n                                            value: Math.ceil(Depth_Max),\r\n                                            label: `${Math.ceil(Depth_Max)}`\r\n                                        }\r\n                                    ]}\r\n                                />\r\n                            </>\r\n                            : ''\r\n                        }\r\n                        \r\n                    </DialogContent>\r\n\r\n                    <DialogActions style={{marginTop: '8px'}}>\r\n                        <Button onClick={handleClose}>\r\n                            Cancel\r\n                        </Button>\r\n\r\n                        {subsetAvailable &&\r\n                            <Button onClick={() => this.handleSubsetDownload(Table_Name, timeString1, timeString2, subsetLat1, subsetLat2, subsetLon1, subsetLon2, subsetDepth1, subsetDepth2)}>\r\n                                Download Subset\r\n                            </Button>                            \r\n                        }\r\n\r\n                        {fullDataAvailable && \r\n                            <Button onClick={() => this.handleFullDatasetDownload(Table_Name)}>\r\n                                Download Full Dataset\r\n                            </Button>\r\n                        }\r\n                    </DialogActions>\r\n                </Dialog> \r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(DownloadDialog));","const datasetMetadataToDownloadFormat = (metadata) => {\r\n    let datasetRows = [];\r\n\r\n    datasetRows.push({\r\n        dataset_short_name: metadata.Short_Name,\r\n        dataset_long_name: metadata.Long_Name,\r\n        dataset_version: metadata.Dataset_Version || '',\r\n        dataset_release_date: metadata.Dataset_Release_Date || '',\r\n        dataset_make: metadata.Variables[0].Make,\r\n        dataset_source: metadata.Data_Source || '',\r\n        dataset_distributor: metadata.Distributor || '',\r\n        dataset_acknowledgement: metadata.Acknowledgement || '',\r\n        dataset_history: metadata.Dataset_History || '',\r\n        dataset_description: metadata.Description || '',\r\n        dataset_references: metadata.References[0] || '',\r\n        climatology: metadata.Climatology || 0,\r\n        cruise_names: metadata.Cruises[0] ? metadata.Cruises[0].Name : ''\r\n    });\r\n\r\n    metadata.Cruises.forEach((e, i) => {\r\n        if(i > 0){\r\n            datasetRows.push({cruise_names: e.Name});\r\n        }\r\n    })\r\n\r\n    metadata.References.forEach((e, i) => {\r\n        if(i > 0){\r\n            if(datasetRows[i]){\r\n                datasetRows[i].dataset_references = e\r\n            }\r\n\r\n            else {\r\n                datasetRows.push({dataset_references: e});\r\n            }\r\n        }\r\n    });\r\n\r\n    let variableRows = [];\r\n    let summaryStatisticsRows = [];\r\n    \r\n    metadata.Variables.forEach((e, i) => {\r\n        variableRows.push({\r\n            var_short_name: e.Variable,\r\n            var_long_name: e.Long_Name,\r\n            var_sensor: e.Sensor,\r\n            var_unit: e.Unit || '',\r\n            var_spatial_res: e.Spatial_Resolution,\r\n            var_temporal_res: e.Temporal_Resolution,\r\n            var_discipline: e.Study_Domain,\r\n            visualize: e.Visualize ? 1 : 0,\r\n            var_keywords: e.Keywords || '',\r\n            var_comment: e.Comment || ''\r\n        });\r\n\r\n        summaryStatisticsRows.push({\r\n            Variable: e.Long_Name,\r\n            Time_Min: e.Time_Min || 'NA',\r\n            Time_Max: e.Time_Max || 'NA',\r\n            Lat_Min: e.Lat_Min || 'NA',\r\n            Lat_Max: e.Lat_Max || 'NA',\r\n            Lon_Min: e.Lon_Min || 'NA',\r\n            Lon_Max: e.Lon_Max || 'NA',\r\n            Variable_Mean: e.Variable_Mean || 'NA',\r\n            Variable_STD: e.Variable_STD || 'NA',\r\n            Variable_Min: e.Variable_Min || 'NA',\r\n            Variable_Max: e.Variable_Max || 'NA',\r\n            Variable_25th: e.Variable_25th || 'NA',\r\n            Variable_50th: e.Variable_50th || 'NA',\r\n            Variable_75th: e.Variable_75th || 'NA'\r\n        });\r\n    });\r\n\r\n    return {\r\n        datasetRows,\r\n        variableRows,\r\n        summaryStatisticsRows\r\n    };\r\n}\r\n\r\nexport default datasetMetadataToDownloadFormat;\r\n\r\n// Lat_Max: 24.603\r\n// Lat_Min: 24.203\r\n// Lon_Max: -156.293\r\n// Lon_Min: -156.819\r\n// Long_Name: \"Bottle Dissolved Oxygen\"\r\n// Sensor: \"In-Situ\"\r\n// Time_Max: \"2015-08-04T12:42:17.000Z\"\r\n// Time_Min: \"2015-07-25T10:42:52.000Z\"\r\n// Unit: \"umol/kg\"\r\n// Variable: \"Bottle_Oxygen\"\r\n// Variable_25th: 195.175\r\n// Variable_50th: 204.45\r\n// Variable_75th: 212.85\r\n// Variable_Count: 40\r\n// Variable_Max: 222.1\r\n// Variable_Mean: 180.9\r\n// Variable_Min: 27.1\r\n// Variable_STD: 56.9010071562","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n\r\nimport { withStyles, Link, Typography, Grid, Paper, Table, TableRow, TableCell, TableBody } from '@material-ui/core';\r\n\r\nimport ReactMarkdown from 'react-markdown';\r\nimport XLSX from 'xlsx';\r\nimport reactStringReplace from 'react-string-replace';\r\n\r\nimport DatasetPageAGGrid from './DatasetPageAGGrid';\r\nimport DatasetJSONLD from './DatasetJSONLD';\r\nimport DownloadDialog from './DownloadDialog';\r\n\r\nimport { datasetFullPageDataFetch, datasetFullPageDataStore } from '../../Redux/actions/catalog';\r\n\r\nimport states from '../../Enums/asyncRequestStates';\r\nimport HelpButtonAndDialog from '../UI/HelpButtonAndDialog';\r\n\r\nimport colors from '../../Enums/colors';\r\nimport metaTags from '../../Enums/metaTags';\r\nimport CartAddOrRemove from './CartAddOrRemove';\r\nimport SkeletonWrapper from '../UI/SkeletonWrapper';\r\nimport LoadProductOnVizPageButton from '../Visualization/LoadProductOnVizPageButton';\r\n\r\nimport datasetMetadataToDownloadFormat from '../../Utility/Catalog/datasetMetadataToDownloadFormat';\r\n\r\n// Text on this page has inline styling for font color because ag-grid's theme classes override mui classes when a dialog is opened\r\n// from inside the grid\r\n\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    datasetFullPageDataLoadingState: state.datasetFullPageDataLoadingState,\r\n    datasetFullPageData: state.datasetFullPageData\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    datasetFullPageDataFetch,\r\n    datasetFullPageDataStore\r\n}\r\n\r\nconst styles = (theme) => ({\r\n    stickyPaper: {\r\n        position: '-webkit-sticky',\r\n        maxHeight: 'calc(100vh - 128px)',\r\n        position: 'sticky',\r\n        top: '90px',\r\n        width: '160px',\r\n        marginLeft: '20px',\r\n        paddingLeft: '12px',\r\n        backgroundColor: 'rgba(0,0,0,.4)',\r\n        overflow: 'auto'\r\n    },\r\n\r\n    guideSection: {\r\n        width: '80%',\r\n        margin: '20px auto 0 auto',\r\n        textAlign: 'left',\r\n        padding: '12px 32px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            padding: '12px 12px',\r\n            margin: '16px auto 16px auto',\r\n            width: '90%'\r\n        },\r\n        fontFamily: '\"roboto\", Serif',\r\n        // maxWidth: '1000px',\r\n        backgroundColor: 'rgba(0,0,0,.4)',\r\n        marginBottom: '20px'\r\n    },\r\n\r\n    sectionHeader: {\r\n        margin: '16px 0 2px 0',\r\n        fontWeight: 100,\r\n        fontFamily: '\"roboto\", Serif', \r\n    },\r\n\r\n    '@media screen and (max-width: 1300px)': {\r\n        stickyPaper: {\r\n          display: 'none',\r\n        },\r\n    },\r\n\r\n    navListItem: {\r\n        color: theme.palette.primary.main,\r\n        padding: '2px 10px 2px 6px'\r\n    },\r\n\r\n    navListItemText: {\r\n        '&:hover': {\r\n            textDecoration: 'underline'\r\n        }\r\n    },\r\n\r\n    doiListItem: {\r\n        color: theme.palette.primary.main,\r\n        padding: '0 10px 0 6px',\r\n        width: 'max-content'\r\n    },\r\n\r\n    doiListItemText: {\r\n        fontSize: '16px',\r\n        '&:hover': {\r\n            textDecoration: 'underline'\r\n        }\r\n    },\r\n\r\n    doiListItemtextWrapper: {\r\n        margin: '0'\r\n    },\r\n\r\n    navListItemtextWrapper: {\r\n        margin: '2px 0'\r\n    },\r\n\r\n    subListText: {\r\n        margin: 0,\r\n        '&:hover': {\r\n            textDecoration: 'underline'\r\n        }\r\n    },\r\n\r\n    anchor: {\r\n        display: 'block',\r\n        position: 'relative',\r\n        top: '-120px',\r\n        visibility: 'hidden'\r\n    },\r\n\r\n    divider: {\r\n        backgroundColor: theme.palette.primary.main,\r\n        marginBottom: '8px'\r\n    },\r\n\r\n    sampleTableRow: {\r\n        '& td':{\r\n            padding: '10px 24px 10px 16px'\r\n        }\r\n    },\r\n\r\n    navListSubItemText: {\r\n        fontSize: '.785rem'\r\n    },\r\n\r\n    navListSubSubItemText: {\r\n        fontSize: '.7rem'\r\n    },\r\n\r\n    outerContainer: {\r\n        marginTop: '70px',\r\n        color: 'white'\r\n    },\r\n\r\n    markdown: {\r\n        '& img': {\r\n            maxWidth: '100%',\r\n            margin: '20px auto 20px auto',\r\n            display: 'block'\r\n        },\r\n\r\n        '& a': {\r\n            color: theme.palette.primary.main,\r\n            textDecoration: 'none'\r\n        },\r\n\r\n        '& p': {\r\n            fontSize: '1rem',\r\n            fontFamily: '\"Lato\",sans-serif',\r\n            fontWeight: 400,\r\n            lineHeight: 1.5,\r\n            \r\n        }\r\n    },\r\n\r\n    smallText: {\r\n        fontSize: '.8rem'\r\n    },\r\n\r\n    referenceTypography: {\r\n        fontSize: '.8rem',\r\n        paddingTop: '12px',\r\n        color: 'white'\r\n    },\r\n\r\n    tableHead: {\r\n        fontWeight: 600\r\n    },\r\n\r\n    variableLongName: {\r\n        color: theme.palette.primary.main\r\n    },\r\n\r\n    pageHeader: {\r\n        [theme.breakpoints.down('sm')]: {\r\n            fontSize: '1.4rem'\r\n        },\r\n    },\r\n\r\n    helpIcon: {\r\n        fontSize: '1.2rem'\r\n    },\r\n\r\n    helpButton: {\r\n        padding: '12px 12px 12px 8px'\r\n    },\r\n\r\n    cartButtonClass: {\r\n        textTransform: 'none',\r\n        color: theme.palette.primary.main,\r\n        marginTop: '16px'\r\n    },\r\n\r\n    cruiseLink: {\r\n        display: 'block',\r\n        marginBottom: '3px',\r\n        color: colors.primary\r\n    }\r\n});\r\n\r\nconst DatasetFullPage = (props) => {\r\n    const { classes, datasetFullPageDataFetch, datasetFullPageDataStore, datasetFullPageData, datasetFullPageDataLoadingState } = props;\r\n\r\n    const { \r\n        Variables,\r\n        Acknowledgement,\r\n        Data_Source,\r\n        Depth_Max,\r\n        Depth_Min,\r\n        Description,\r\n        Distributor,\r\n        Lat_Max,\r\n        Lat_Min,\r\n        Lon_Max,\r\n        Lon_Min,\r\n        Long_Name,\r\n        Short_Name,\r\n        Table_Name,\r\n        Time_Max,\r\n        Time_Min,\r\n        References,\r\n        Make,\r\n        Process_Level,\r\n        Spatial_Resolution,\r\n        Temporal_Resolution,\r\n        Sensors,\r\n        Cruises\r\n    } = datasetFullPageData;\r\n    \r\n    const loading = datasetFullPageDataLoadingState === states.inProgress;\r\n\r\n    const [ downloadDialogOpen, setDownloadDialogOpen ] = React.useState(false);\r\n\r\n    useEffect(() => {\r\n        datasetFullPageDataFetch(props.match.params.dataset);\r\n\r\n        return (() => datasetFullPageDataStore({}));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        document.title = Long_Name || metaTags.default.title;\r\n        document.description = Description || metaTags.default.description;\r\n\r\n        return (() => {\r\n            document.title = metaTags.default.title;\r\n            document.description = metaTags.default.description;\r\n        })\r\n    }, [Long_Name])\r\n\r\n    const downloadMetadata = () => {\r\n        // let fullPageData = {...datasetFullPageData};\r\n        let fullPageData = datasetMetadataToDownloadFormat(datasetFullPageData);\r\n        // delete fullPageData.Variables;\r\n        let workbook = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(workbook, XLSX.utils.json_to_sheet(fullPageData.datasetRows), 'Dataset Metadata');\r\n        XLSX.utils.book_append_sheet(workbook, XLSX.utils.json_to_sheet(fullPageData.variableRows), 'Variable Metadata');\r\n        XLSX.utils.book_append_sheet(workbook, XLSX.utils.json_to_sheet(fullPageData.summaryStatisticsRows), 'Variable Summary Statistics');\r\n        XLSX.writeFile(workbook, `${Short_Name}_Metadata'.xlsx`);\r\n    }\r\n    \r\n    return (\r\n        <Grid container className={classes.outerContainer}>\r\n            {downloadDialogOpen ? \r\n            \r\n            <DownloadDialog\r\n                dialogOpen={downloadDialogOpen}\r\n                dataset={datasetFullPageData}\r\n                handleClose={() => setDownloadDialogOpen(false)}\r\n            />       \r\n            : ''}\r\n            \r\n            <Grid item xs={12}>\r\n                <Paper className={classes.guideSection} elevation={4}>\r\n                    <SkeletonWrapper loading={loading}>\r\n                        <a className={classes.anchor} id='description'></a>\r\n                        <Typography variant={'h4'} className={classes.pageHeader} style={{color: 'white'}}>\r\n                            {Long_Name}                    \r\n                        </Typography>                        \r\n\r\n                        <ReactMarkdown source={Description} className={classes.markdown}/>\r\n\r\n                        <a className={classes.anchor} id='info-table'></a>\r\n\r\n                        <Table size='small' style={{marginTop: '24px', maxWidth: '800px'}}>\r\n                            <TableBody>\r\n\r\n                                <TableRow className={classes.sampleTableRow}>\r\n                                    <TableCell className={classes.tableHead}>\r\n                                        Make\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {Make}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n\r\n                                <TableRow className={classes.sampleTableRow}>\r\n                                    <TableCell className={classes.tableHead}>\r\n                                        Sensor{Sensors && Sensors.length > 1 ? 's' : ''}\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {Sensors ? Sensors.join(', ') : ''}\r\n                                    </TableCell>\r\n                                </TableRow>                                \r\n\r\n                                <TableRow className={classes.sampleTableRow}>\r\n                                    <TableCell className={classes.tableHead}>\r\n                                        Process Level\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {Process_Level}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n\r\n                                <TableRow className={classes.sampleTableRow}>\r\n                                    <TableCell className={classes.tableHead}>\r\n                                        Database Table Name\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {Table_Name}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n\r\n                                <TableRow className={classes.sampleTableRow}>\r\n                                    <TableCell className={classes.tableHead}>\r\n                                        Database Dataset Name\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {Short_Name}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n\r\n                                <TableRow className={classes.sampleTableRow}>\r\n                                    <TableCell className={classes.tableHead}>\r\n                                        Temporal Resolution\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {Temporal_Resolution}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n\r\n                                <TableRow className={classes.sampleTableRow}>\r\n                                    <TableCell className={classes.tableHead}>\r\n                                        Time Start*\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {Time_Min ? Time_Min.slice(0, 10) : 'NA'}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n\r\n                                <TableRow className={classes.sampleTableRow}>\r\n                                    <TableCell className={classes.tableHead}>\r\n                                        Time End*\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {Time_Max ? Time_Max.slice(0, 10) : 'NA'}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n\r\n                                <TableRow className={classes.sampleTableRow}>\r\n                                    <TableCell className={classes.tableHead}>\r\n                                        Spatial Resolution\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {Spatial_Resolution}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n\r\n                                <TableRow className={classes.sampleTableRow}>\r\n                                    <TableCell className={classes.tableHead}>\r\n                                        Lat Start*\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {Lat_Min}&deg;\r\n                                    </TableCell>\r\n                                </TableRow>\r\n\r\n                                <TableRow className={classes.sampleTableRow}>\r\n                                    <TableCell className={classes.tableHead}>\r\n                                        Lat End*\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {Lat_Max}&deg;\r\n                                    </TableCell>\r\n                                </TableRow>\r\n\r\n                                <TableRow className={classes.sampleTableRow}>\r\n                                    <TableCell className={classes.tableHead}>\r\n                                        Lon Start*\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {Lon_Min}&deg;\r\n                                    </TableCell>\r\n                                </TableRow>\r\n\r\n                                <TableRow className={classes.sampleTableRow}>\r\n                                    <TableCell className={classes.tableHead}>\r\n                                        Lon End*\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {Lon_Max}&deg;\r\n                                    </TableCell>\r\n                                </TableRow>\r\n\r\n                                <TableRow className={classes.sampleTableRow}>\r\n                                    <TableCell className={classes.tableHead}>\r\n                                        Depth Start*\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {Depth_Max ? Depth_Min + 'm' : 'Surface Only'}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n\r\n                                <TableRow className={classes.sampleTableRow}>\r\n                                    <TableCell className={classes.tableHead}>\r\n                                        Depth End*\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {Depth_Max ? Depth_Max + 'm' : 'Surface Only'}\r\n                                    </TableCell>\r\n                                </TableRow>                                \r\n                            </TableBody>\r\n                        </Table>\r\n                        <Typography variant='caption' style={{margin: '4px 0 14px 4px', display: 'inline-block', color: 'white'}}>\r\n                            *Temporal and spatial coverage may differ between member variables\r\n                        </Typography>\r\n\r\n                        {/* <iframe src={Icon_URL ? Icon_URL.slice(0, -4) + '.html' : ''}/> */}\r\n\r\n                        <Typography variant='h5' className={classes.sectionHeader} style={{marginBottom: '16px', color: 'white'}}>\r\n                            <a className={classes.anchor} id='variables'></a>\r\n                            Variables\r\n                        </Typography>\r\n\r\n                        {\r\n                            Variables ? <DatasetPageAGGrid Variables={Variables}/> : ''\r\n                        }\r\n\r\n                        {(Data_Source) || loading ?\r\n                        \r\n                        <React.Fragment>\r\n                                <Typography variant='h5' className={classes.sectionHeader} style={{color: 'white'}}>\r\n                                    <a className={classes.anchor} id='data-source'></a>\r\n                                    Data Source\r\n                                </Typography>\r\n\r\n                                <Typography className={classes.smallText} style={{color: 'white'}}>\r\n                                    {\r\n                                        reactStringReplace(Data_Source, \r\n                                            /\\b(https?:\\/\\/[\\-A-Za-z0-9+&@#\\/%?=~_|!:,.;()]*[\\-A-Za-z0-9+&@#\\/%=~_|])/g, \r\n                                            (match, i) => (\r\n                                                <Link key={i} href={match} target='_blank' style={{color: colors.primary}}>{match}</Link>\r\n                                        ))  \r\n                                    }\r\n                                    {/* {Data_Source} */}\r\n                                </Typography>\r\n                        </React.Fragment>\r\n\r\n                        : ''\r\n                        }                                         \r\n\r\n                        {\r\n                            Distributor || loading ?\r\n\r\n                            <React.Fragment>\r\n                                <Typography variant='h5' className={classes.sectionHeader} style={{color: 'white'}}>\r\n                                    <a className={classes.anchor} id='distributor'></a>\r\n                                    Distributor\r\n                                </Typography>\r\n\r\n                                <Typography className={classes.smallText} style={{color: 'white'}}>\r\n                                    {\r\n                                        reactStringReplace(Distributor, \r\n                                            /\\b(https?:\\/\\/[\\-A-Za-z0-9+&@#\\/%?=~_|!:,.;()]*[\\-A-Za-z0-9+&@#\\/%=~_|])/g, \r\n                                            (match, i) => (\r\n                                                <Link key={i} href={match} target='_blank' style={{color: colors.primary}}>{match}</Link>\r\n                                        ))  \r\n                                    }\r\n                                    {/* {Distributor} */}\r\n                                </Typography>\r\n                            </React.Fragment>\r\n\r\n\r\n                            : ''\r\n                        }\r\n\r\n                        {Acknowledgement || loading ?\r\n                        \r\n                            <React.Fragment>\r\n                                    <Typography variant='h5' className={classes.sectionHeader} style={{color: 'white'}}>\r\n                                        <a className={classes.anchor} id='acknowledgement'></a>\r\n                                        Acknowledgement\r\n                                    </Typography>\r\n\r\n                                    <Typography className={classes.smallText} style={{color: 'white'}}>                                        \r\n                                        {\r\n                                            reactStringReplace(Acknowledgement, \r\n                                                /\\b(https?:\\/\\/[\\-A-Za-z0-9+&@#\\/%?=~_|!:,.;()]*[\\-A-Za-z0-9+&@#\\/%=~_|])/g, \r\n                                                (match, i) => (\r\n                                                    <Link key={i} href={match} target='_blank' style={{color: colors.primary}}>{match}</Link>\r\n                                            ))  \r\n                                        }\r\n                                        {/* {Acknowledgement} */}\r\n                                    </Typography>\r\n                                </React.Fragment>\r\n\r\n\r\n                                : ''                        \r\n                        }\r\n\r\n                        {(References && References.length) || loading ?\r\n                        \r\n                            <React.Fragment>\r\n                                    <Typography variant='h5' className={classes.sectionHeader} style={{color: 'white'}}>\r\n                                        <a className={classes.anchor} id='references'></a>\r\n                                        References\r\n                                    </Typography>\r\n\r\n                                    {!loading ?\r\n                                        References.map((reference, i) => (\r\n                                            <Typography className={classes.smallText} style={{color: 'white', marginTop: '6px'}} key={i}>\r\n                                                {\r\n                                                    reactStringReplace(reference, \r\n                                                        /\\b(https?:\\/\\/[\\-A-Za-z0-9+&@#\\/%?=~_|!:,.;()]*[\\-A-Za-z0-9+&@#\\/%=~_|])/g, \r\n                                                        (match, i) => (\r\n                                                          <Link key={i} href={match} target='_blank' style={{color: colors.primary}}>{match}</Link>\r\n                                                    ))  \r\n                                                }\r\n                                            </Typography>\r\n                                        ))\r\n                                                                              \r\n                                        : ''}                            \r\n                            </React.Fragment>\r\n\r\n                            : ''\r\n                        }\r\n\r\n                        {\r\n                            (Cruises && Cruises.length ?\r\n                                <>\r\n                                    <Typography variant='h5' className={classes.sectionHeader} style={{color: 'white'}}>\r\n                                        Cruises contributing data to this dataset:\r\n                                    </Typography>\r\n\r\n                                    {\r\n                                        Cruises.map((e) => (\r\n                                            <Link \r\n                                                component={RouterLink} \r\n                                                to={`/catalog/cruises/${e.Name}`}\r\n                                                key={e.Name}\r\n                                                className={classes.cruiseLink}\r\n                                            >\r\n                                                {e.Name}\r\n                                            </Link>\r\n                                        ))\r\n                                    }\r\n                                </>                                   \r\n                            \r\n                            : ''\r\n                            )\r\n                        }\r\n\r\n                        <Typography variant='h5' className={classes.sectionHeader} style={{color: 'white'}}>\r\n                            <a className={classes.anchor} id='data-access'></a>\r\n                            Data Access\r\n                        </Typography>\r\n\r\n                        <Link\r\n                            component='button'\r\n                            onClick={downloadMetadata}\r\n                            style={{color: colors.primary}}\r\n                        >\r\n                            Download Dataset Metadata\r\n                        </Link>\r\n\r\n                        <HelpButtonAndDialog\r\n                            title='Downloading Metadata'\r\n                            content={\r\n                                <Typography>\r\n                                    This link will download an xlsx workbook with a page containing\r\n                                    the dataset's metadata, and a second page containing the metadata\r\n                                    of its member variables.\r\n                                </Typography>\r\n                            }\r\n                            iconClass={classes.helpIcon}\r\n                            buttonClass={classes.helpButton}\r\n                        />\r\n                        \r\n                        <Link\r\n                            component='button'\r\n                            onClick={() => setDownloadDialogOpen(true)}\r\n                            style={{color: colors.primary, display: 'block'}}\r\n                        >\r\n                            Download Data\r\n                        </Link>\r\n\r\n                        <CartAddOrRemove dataset={datasetFullPageData} cartButtonClass={classes.cartButtonClass}/>\r\n\r\n                    {!loading && datasetFullPageData && Object.keys(datasetFullPageData).length ? <DatasetJSONLD {...datasetFullPageData}/> : ''}\r\n                    </SkeletonWrapper>              \r\n                </Paper>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(DatasetFullPage));"],"sourceRoot":""}