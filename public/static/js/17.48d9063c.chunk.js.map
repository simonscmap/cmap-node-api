{"version":3,"sources":["../node_modules/jwt-decode/lib/index.js","../node_modules/jwt-decode/lib/base64_url_decode.js","../node_modules/jwt-decode/lib/atob.js","Components/User/ChoosePassword.js"],"names":["base64_url_decode","require","InvalidTokenError","message","this","prototype","Error","name","module","exports","token","options","pos","header","JSON","parse","split","e","atob","str","output","replace","length","decodeURIComponent","m","p","code","charCodeAt","toString","toUpperCase","b64DecodeUnicode","err","InvalidCharacterError","window","bind","input","String","bs","buffer","bc","idx","charAt","fromCharCode","indexOf","mapDispatchToProps","choosePasswordRequestSend","choosePasswordRequestReset","choosePasswordButtonRef","React","createRef","ChoosePassword","props","componentDidMount","handleChangePassword","event","setState","state","password","target","value","handleSubmit","handleChangeConfirmPassword","confirmPassword","handleKeyPress","key","current","click","location","pathname","decodedToken","jwtDecode","expiration","Date","setUTCSeconds","exp","expired","email","sub","classes","choosePasswordState","passwordValid","test","confirmPasswordValid","disabled","Boolean","className","paper","description","component","RouterLink","to","states","succeeded","failed","direction","justify","formGrid","container","item","fullWidth","autoFocus","label","margin","id","type","variant","onChange","error","helperText","onKeyPress","InputLabelProps","shrink","color","onClick","ref","Component","connect","ownProps","withRouter","withStyles","theme","width","padding","textFields","display","marginBottom","height","button"],"mappings":"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","file":"static/js/17.48d9063c.chunk.js","sourcesContent":["'use strict';\n\nvar base64_url_decode = require('./base64_url_decode');\n\nfunction InvalidTokenError(message) {\n  this.message = message;\n}\n\nInvalidTokenError.prototype = new Error();\nInvalidTokenError.prototype.name = 'InvalidTokenError';\n\nmodule.exports = function (token,options) {\n  if (typeof token !== 'string') {\n    throw new InvalidTokenError('Invalid token specified');\n  }\n\n  options = options || {};\n  var pos = options.header === true ? 0 : 1;\n  try {\n    return JSON.parse(base64_url_decode(token.split('.')[pos]));\n  } catch (e) {\n    throw new InvalidTokenError('Invalid token specified: ' + e.message);\n  }\n};\n\nmodule.exports.InvalidTokenError = InvalidTokenError;\n","var atob = require('./atob');\n\nfunction b64DecodeUnicode(str) {\n  return decodeURIComponent(atob(str).replace(/(.)/g, function (m, p) {\n    var code = p.charCodeAt(0).toString(16).toUpperCase();\n    if (code.length < 2) {\n      code = '0' + code;\n    }\n    return '%' + code;\n  }));\n}\n\nmodule.exports = function(str) {\n  var output = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  switch (output.length % 4) {\n    case 0:\n      break;\n    case 2:\n      output += \"==\";\n      break;\n    case 3:\n      output += \"=\";\n      break;\n    default:\n      throw \"Illegal base64url string!\";\n  }\n\n  try{\n    return b64DecodeUnicode(output);\n  } catch (err) {\n    return atob(output);\n  }\n};\n","/**\n * The code was extracted from:\n * https://github.com/davidchambers/Base64.js\n */\n\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\nfunction InvalidCharacterError(message) {\n  this.message = message;\n}\n\nInvalidCharacterError.prototype = new Error();\nInvalidCharacterError.prototype.name = 'InvalidCharacterError';\n\nfunction polyfill (input) {\n  var str = String(input).replace(/=+$/, '');\n  if (str.length % 4 == 1) {\n    throw new InvalidCharacterError(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n  }\n  for (\n    // initialize result and counters\n    var bc = 0, bs, buffer, idx = 0, output = '';\n    // get next character\n    buffer = str.charAt(idx++);\n    // character found in table? initialize bit storage and add its ascii value;\n    ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n      // and if not first of each 4 characters,\n      // convert the first 8 bits to one ascii character\n      bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\n  ) {\n    // try to find character in table (0-63, not found => -1)\n    buffer = chars.indexOf(buffer);\n  }\n  return output;\n}\n\n\nmodule.exports = typeof window !== 'undefined' && window.atob && window.atob.bind(window) || polyfill;\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from \"react-router\";\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nimport { Paper, Button, Typography, TextField, Grid, Link } from '@material-ui/core';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport { choosePasswordRequestSend, choosePasswordRequestReset } from '../../Redux/actions/user';\r\n\r\nimport states from '../../Enums/asyncRequestStates';\r\n\r\nconst styles = (theme) => ({\r\n    paper: {\r\n        width: '60%',\r\n        margin: '120px auto',\r\n        // height: '40vh',\r\n        padding: '24px 12px'\r\n    },\r\n\r\n    textFields: {\r\n        display: 'block',\r\n        width: '380px'\r\n    },\r\n\r\n    description: {\r\n        marginBottom: '12px'\r\n    },\r\n\r\n    formGrid: {\r\n        height: '270px',\r\n        padding: '0 90px'\r\n\r\n    },\r\n\r\n    button: {\r\n        width: '120px'\r\n    }\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    choosePasswordRequestSend,\r\n    choosePasswordRequestReset\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    choosePasswordState: state.choosePasswordState,\r\n  });\r\n\r\n\r\nconst choosePasswordButtonRef = React.createRef();\r\n\r\n// Used with forgot password link from email\r\nclass ChoosePassword extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        let token = props.location.pathname.split('/')[2];\r\n        let decodedToken = jwtDecode(token)\r\n        let expiration = new Date(0);\r\n        expiration.setUTCSeconds(decodedToken.exp);\r\n\r\n        let expired = new Date() > expiration;\r\n\r\n        this.state = {\r\n            password: '',\r\n            confirmPassword: '',\r\n            expired,\r\n            token,\r\n            email: decodedToken.sub\r\n        }\r\n    }\r\n    \r\n    componentDidMount = () => {\r\n        this.props.choosePasswordRequestReset();\r\n    }\r\n\r\n    handleChangePassword = event => {\r\n        this.setState({...this.state, password: event.target.value});\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        this.props.choosePasswordRequestSend({\r\n            password: this.state.password,\r\n            token: this.state.token\r\n        })\r\n    }\r\n    handleChangeConfirmPassword = event => {\r\n        this.setState({...this.state, confirmPassword: event.target.value});\r\n    }\r\n\r\n    handleKeyPress = event => {\r\n        if (event.key === 'Enter') {\r\n            choosePasswordButtonRef.current.click();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { classes, choosePasswordState } = this.props;\r\n        const { password, confirmPassword, expired } = this.state;\r\n\r\n        const passwordValid = /^(?=.*[0-9])(?=.*[.!@#$%^&*])[a-zA-Z0-9.!@#$%^&*]{8,32}$/.test(password);\r\n        const confirmPasswordValid = password === confirmPassword;    \r\n        const disabled = Boolean(password.length === 0 || !passwordValid || !confirmPasswordValid);\r\n        \r\n        if(expired){\r\n            return (\r\n                <Paper className={classes.paper}>\r\n                    <Typography className={classes.description}>\r\n                        This link has expired. Click here to send a <Link component={RouterLink} to={{pathname: '/forgotpass'}}>new link</Link>.\r\n                    </Typography>\r\n                </Paper>\r\n            )\r\n        }\r\n\r\n        if(choosePasswordState === states.succeeded){\r\n            return (\r\n                <Paper className={classes.paper}>\r\n                    <Typography className={classes.description}>\r\n                        Success! You can now log in using your new password.\r\n                    </Typography>\r\n                </Paper>\r\n            )\r\n        } \r\n        \r\n        else if(choosePasswordState === states.failed){\r\n            return (\r\n                <Paper className={classes.paper}>\r\n                    <Typography className={classes.description}>\r\n                        We were unable to complete this request. Please try again.\r\n                    </Typography>\r\n                </Paper>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <Paper className={classes.paper}>\r\n                <Typography className={classes.description}>\r\n                    Please choose a password\r\n                </Typography>\r\n    \r\n                <Grid direction='column' justify='space-evenly' className={classes.formGrid} container>\r\n                    <Grid item>\r\n                        <TextField     \r\n                            fullWidth           \r\n                            autoFocus\r\n                            label='Password'\r\n                            margin=\"normal\"\r\n                            id=\"password\"\r\n                            type=\"password\"\r\n                            variant='outlined'\r\n                            name='password'                        \r\n                            value={password}\r\n                            onChange={this.handleChangePassword}\r\n                            error={Boolean(!passwordValid && password.length)}\r\n                            helperText='Must be 8 to 32 characters with 1 number and 1 special character.'\r\n                            onKeyPress={this.handleKeyPress}\r\n                            InputLabelProps={{\r\n                                shrink: true\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n    \r\n                    <Grid item>\r\n                        <TextField\r\n                            fullWidth\r\n                            label='Confirm Password'\r\n                            margin=\"normal\"\r\n                            id=\"confirmPassword\"\r\n                            type=\"password\"\r\n                            variant='outlined'\r\n                            name='confirmPassword'                        \r\n                            value={confirmPassword}\r\n                            onChange={this.handleChangeConfirmPassword}\r\n                            error={!confirmPasswordValid}\r\n                            helperText={confirmPasswordValid ? '' : 'Passwords must match'}\r\n                            onKeyPress={this.handleKeyPress}\r\n                            InputLabelProps={{\r\n                                shrink: true\r\n                            }}\r\n                        />                    \r\n                    </Grid>\r\n    \r\n                    <Grid item>\r\n                        <Button \r\n                            fullWidth \r\n                            variant='outlined' \r\n                            color='primary' \r\n                            disabled={disabled} \r\n                            onClick={this.handleSubmit}\r\n                            ref={choosePasswordButtonRef}\r\n                        >\r\n                            Submit\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>   \r\n            </Paper>                \r\n        )    \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(withStyles(styles)(ChoosePassword)));"],"sourceRoot":""}